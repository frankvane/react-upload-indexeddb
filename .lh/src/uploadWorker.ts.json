{
    "sourceFile": "src/uploadWorker.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748866396098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748866674050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,42 +4,54 @@\n self.onmessage = async (e) => {\r\n   const { fileInfo, fileBuffer } = e.data;\r\n   const chunkSize = fileInfo.chunkSize || 1024 * 1024;\r\n   const chunkCount = Math.ceil(fileBuffer.byteLength / chunkSize);\r\n+  const chunk_md5s: string[] = [];\r\n+  // 1. 计算所有分片的md5\r\n+  for (let i = 0; i < chunkCount; i++) {\r\n+    const start = i * chunkSize;\r\n+    const end = Math.min(fileBuffer.byteLength, start + chunkSize);\r\n+    const chunk = fileBuffer.slice(start, end);\r\n+    const chunkMd5 = self.SparkMD5.ArrayBuffer.hash(chunk);\r\n+    chunk_md5s.push(chunkMd5);\r\n+  }\r\n \r\n-  // 1. 秒传确认\r\n+  // 2. 秒传确认\r\n   const instantRes = await fetch(\"http://localhost:3000/api/file/instant\", {\r\n     method: \"POST\",\r\n     headers: { \"Content-Type\": \"application/json\" },\r\n     body: JSON.stringify({\r\n-      hash: fileInfo.hash,\r\n-      chunkCount,\r\n-      chunkSize,\r\n-      fileName: fileInfo.fileName,\r\n-      fileSize: fileInfo.fileSize,\r\n+      file_id: fileInfo.hash,\r\n+      md5: fileInfo.hash,\r\n+      name: fileInfo.fileName,\r\n+      size: fileInfo.fileSize,\r\n+      total: chunkCount,\r\n+      chunk_md5s,\r\n     }),\r\n   });\r\n   const instantData = await instantRes.json();\r\n-  const needUploadChunks = [];\r\n+  const needUploadChunks: number[] = [];\r\n   for (let i = 0; i < chunkCount; i++) {\r\n     const exist = instantData.data?.chunkCheckResult?.find(\r\n-      (c) => c.index === i\r\n+      (c: { index: number; exist: boolean }) => c.index === i\r\n     )?.exist;\r\n     if (!exist) needUploadChunks.push(i);\r\n   }\r\n \r\n-  // 2. 分片上传\r\n+  // 3. 分片上传\r\n   for (let i = 0; i < chunkCount; i++) {\r\n     if (!needUploadChunks.includes(i)) continue;\r\n     const start = i * chunkSize;\r\n     const end = Math.min(fileBuffer.byteLength, start + chunkSize);\r\n     const chunk = fileBuffer.slice(start, end);\r\n+    const chunkMd5 = chunk_md5s[i];\r\n \r\n     const formData = new FormData();\r\n-    formData.append(\"file\", new Blob([chunk]));\r\n-    formData.append(\"hash\", fileInfo.hash);\r\n+    formData.append(\"file_id\", fileInfo.hash);\r\n     formData.append(\"index\", i.toString());\r\n-    formData.append(\"fileName\", fileInfo.fileName);\r\n+    formData.append(\"chunk\", new Blob([chunk]));\r\n+    formData.append(\"total\", chunkCount.toString());\r\n+    formData.append(\"chunk_md5\", chunkMd5);\r\n \r\n     await fetch(\"http://localhost:3000/api/file/upload\", {\r\n       method: \"POST\",\r\n       body: formData,\r\n@@ -50,16 +62,18 @@\n       progress: Math.round(((i + 1) / chunkCount) * 100),\r\n     });\r\n   }\r\n \r\n-  // 3. 合并\r\n+  // 4. 合并\r\n   await fetch(\"http://localhost:3000/api/file/merge\", {\r\n     method: \"POST\",\r\n     headers: { \"Content-Type\": \"application/json\" },\r\n     body: JSON.stringify({\r\n-      hash: fileInfo.hash,\r\n-      fileName: fileInfo.fileName,\r\n-      chunkCount,\r\n+      file_id: fileInfo.hash,\r\n+      md5: fileInfo.hash,\r\n+      name: fileInfo.fileName,\r\n+      size: fileInfo.fileSize,\r\n+      total: chunkCount,\r\n     }),\r\n   });\r\n \r\n   self.postMessage({ type: \"done\" });\r\n"
                },
                {
                    "date": 1748866684556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   for (let i = 0; i < chunkCount; i++) {\r\n     const start = i * chunkSize;\r\n     const end = Math.min(fileBuffer.byteLength, start + chunkSize);\r\n     const chunk = fileBuffer.slice(start, end);\r\n-    const chunkMd5 = self.SparkMD5.ArrayBuffer.hash(chunk);\r\n+    const chunkMd5 = (self as any).SparkMD5.ArrayBuffer.hash(chunk);\r\n     chunk_md5s.push(chunkMd5);\r\n   }\r\n \r\n   // 2. 秒传确认\r\n"
                }
            ],
            "date": 1748866396098,
            "name": "Commit-0",
            "content": "// @ts-expect-error: self 类型\r\nimportScripts('https://cdn.jsdelivr.net/npm/spark-md5@3.0.2/spark-md5.min.js');\r\n\r\nself.onmessage = async (e) => {\r\n  const { fileInfo, fileBuffer } = e.data;\r\n  const chunkSize = fileInfo.chunkSize || 1024 * 1024;\r\n  const chunkCount = Math.ceil(fileBuffer.byteLength / chunkSize);\r\n\r\n  // 1. 秒传确认\r\n  const instantRes = await fetch('http://localhost:3000/api/file/instant', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      hash: fileInfo.hash,\r\n      chunkCount,\r\n      chunkSize,\r\n      fileName: fileInfo.fileName,\r\n      fileSize: fileInfo.fileSize,\r\n    }),\r\n  });\r\n  const instantData = await instantRes.json();\r\n  const needUploadChunks = [];\r\n  for (let i = 0; i < chunkCount; i++) {\r\n    const exist = instantData.data?.chunkCheckResult?.find((c) => c.index === i)?.exist;\r\n    if (!exist) needUploadChunks.push(i);\r\n  }\r\n\r\n  // 2. 分片上传\r\n  for (let i = 0; i < chunkCount; i++) {\r\n    if (!needUploadChunks.includes(i)) continue;\r\n    const start = i * chunkSize;\r\n    const end = Math.min(fileBuffer.byteLength, start + chunkSize);\r\n    const chunk = fileBuffer.slice(start, end);\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', new Blob([chunk]));\r\n    formData.append('hash', fileInfo.hash);\r\n    formData.append('index', i.toString());\r\n    formData.append('fileName', fileInfo.fileName);\r\n\r\n    await fetch('http://localhost:3000/api/file/upload', {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n\r\n    self.postMessage({ type: 'progress', progress: Math.round(((i + 1) / chunkCount) * 100) });\r\n  }\r\n\r\n  // 3. 合并\r\n  await fetch('http://localhost:3000/api/file/merge', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      hash: fileInfo.hash,\r\n      fileName: fileInfo.fileName,\r\n      chunkCount,\r\n    }),\r\n  });\r\n\r\n  self.postMessage({ type: 'done' });\r\n};"
        }
    ]
}