{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1748864354728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748864668321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,67 @@\n+import React, { useRef } from \"react\";\n+\n+const CHUNK_SIZE = 1024 * 1024; // 1MB\n+\n+const openDB = () => {\n+  return new Promise<IDBDatabase>((resolve, reject) => {\n+    const request = window.indexedDB.open(\"fileDB\", 1);\n+    request.onupgradeneeded = (event) => {\n+      const db = request.result;\n+      if (!db.objectStoreNames.contains(\"files\")) {\n+        db.createObjectStore(\"files\", { keyPath: \"key\" });\n+      }\n+    };\n+    request.onsuccess = () => resolve(request.result);\n+    request.onerror = () => reject(request.error);\n+  });\n+};\n+\n+const saveFileToDB = async (fileObj: any) => {\n+  const db = await openDB();\n+  const tx = db.transaction(\"files\", \"readwrite\");\n+  const store = tx.objectStore(\"files\");\n+  store.put(fileObj);\n+  return new Promise((resolve, reject) => {\n+    tx.oncomplete = () => resolve(true);\n+    tx.onerror = () => reject(tx.error);\n+  });\n+};\n+\n const App = () => {\n-  return <div>App</div>;\n+  const inputRef = useRef<HTMLInputElement>(null);\n+\n+  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n+    const file = e.target.files?.[0];\n+    if (!file) return;\n+    const arrayBuffer = await file.arrayBuffer();\n+    const chunkSize = CHUNK_SIZE;\n+    const chunkCount = Math.ceil(arrayBuffer.byteLength / chunkSize);\n+    // 分块\n+    const chunks = [];\n+    for (let i = 0; i < chunkCount; i++) {\n+      const start = i * chunkSize;\n+      const end = Math.min(arrayBuffer.byteLength, start + chunkSize);\n+      chunks.push(arrayBuffer.slice(start, end));\n+    }\n+    const fileObj = {\n+      key: Date.now() + \"_\" + file.name,\n+      name: file.name,\n+      size: file.size,\n+      arraybuffer: arrayBuffer,\n+      chunksize: chunkSize,\n+      chunkcount: chunkCount,\n+      // 可选：chunks: chunks,\n+    };\n+    await saveFileToDB(fileObj);\n+    alert(\"文件已存入indexedDB！\");\n+  };\n+\n+  return (\n+    <div>\n+      <input type=\"file\" ref={inputRef} onChange={handleFileChange} />\n+      <div>App</div>\n+    </div>\n+  );\n };\n+\n export default App;\n"
                },
                {
                    "date": 1748864674709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n const openDB = () => {\n   return new Promise<IDBDatabase>((resolve, reject) => {\n     const request = window.indexedDB.open(\"fileDB\", 1);\n-    request.onupgradeneeded = (event) => {\n+    request.onupgradeneeded = () => {\n       const db = request.result;\n       if (!db.objectStoreNames.contains(\"files\")) {\n         db.createObjectStore(\"files\", { keyPath: \"key\" });\n       }\n@@ -15,9 +15,19 @@\n     request.onerror = () => reject(request.error);\n   });\n };\n \n-const saveFileToDB = async (fileObj: any) => {\n+type FileDBObj = {\n+  key: string;\n+  name: string;\n+  size: number;\n+  arraybuffer: ArrayBuffer;\n+  chunksize: number;\n+  chunkcount: number;\n+  // chunks?: ArrayBuffer[];\n+};\n+\n+const saveFileToDB = async (fileObj: FileDBObj) => {\n   const db = await openDB();\n   const tx = db.transaction(\"files\", \"readwrite\");\n   const store = tx.objectStore(\"files\");\n   store.put(fileObj);\n"
                },
                {
                    "date": 1748864682370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,4 @@\n+const App = () => {\n+  return <div>App</div>;\n+};\n+export default App;\n"
                },
                {
                    "date": 1748864894538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,78 @@\n+import React, { useRef } from 'react';\n+\n+import localforage from 'localforage';\n+\n+export enum UploadStatus {\n+  WAITING = 'waiting',\n+  UPLOADING = 'uploading',\n+  PAUSED = 'paused',\n+  COMPLETED = 'completed',\n+  ERROR = 'error',\n+}\n+\n+export interface UploadFile {\n+  id: string; // 唯一ID\n+  fileName: string; // 文件名\n+  fileSize: number; // 文件大小\n+  fileType: string; // 文件类型\n+  lastModified: number; // 最后修改时间\n+  status: UploadStatus; // 上传状态\n+  progress: number; // 上传进度 (0-100)\n+  hash?: string; // 文件哈希值\n+  chunkSize?: number; // 分片大小\n+  chunkCount?: number; // 分片总数\n+  uploadedChunks?: number; // 已上传分片数\n+  pausedChunks?: number[]; // 暂停时已上传的分片索引\n+  errorMessage?: string; // 错误信息\n+  createdAt: number; // 创建时间戳\n+  order: number; // 上传顺序\n+}\n+\n+const CHUNK_SIZE = 1024 * 1024; // 1MB\n+\n+localforage.config({\n+  name: 'upload-indexeddb',\n+  storeName: 'upload_files',\n+});\n+\n const App = () => {\n-  return <div>App</div>;\n+  const inputRef = useRef<HTMLInputElement>(null);\n+\n+  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n+    const file = e.target.files?.[0];\n+    if (!file) return;\n+    const chunkSize = CHUNK_SIZE;\n+    const chunkCount = Math.ceil(file.size / chunkSize);\n+    const id = `${Date.now()}_${file.name}`;\n+    const uploadFile: UploadFile = {\n+      id,\n+      fileName: file.name,\n+      fileSize: file.size,\n+      fileType: file.type,\n+      lastModified: file.lastModified,\n+      status: UploadStatus.WAITING,\n+      progress: 0,\n+      chunkSize,\n+      chunkCount,\n+      uploadedChunks: 0,\n+      pausedChunks: [],\n+      createdAt: Date.now(),\n+      order: 0,\n+    };\n+    await localforage.setItem(id, uploadFile);\n+    alert('文件信息已存入indexedDB！');\n+  };\n+\n+  return (\n+    <div>\n+      <input\n+        type=\"file\"\n+        ref={inputRef}\n+        onChange={handleFileChange}\n+      />\n+      <div>App</div>\n+    </div>\n+  );\n };\n+\n export default App;\n"
                },
                {
                    "date": 1748864977619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,29 @@\n-import React, { useRef } from 'react';\n+import React, { useRef } from \"react\";\n \n-import localforage from 'localforage';\n+import localforage from \"localforage\";\n \n export enum UploadStatus {\n-  WAITING = 'waiting',\n-  UPLOADING = 'uploading',\n-  PAUSED = 'paused',\n-  COMPLETED = 'completed',\n-  ERROR = 'error',\n+  // 上传已排队\n+  QUEUED = \"queued\",\n+  // 上传已排队等待上传\n+  QUEUED_FOR_UPLOAD = \"queued-for-upload\",\n+  // 正在计算\n+  CALCULATING = \"calculating\",\n+  // 正在准备上传\n+  PREPARING_UPLOAD = \"preparing-upload\",\n+  // 正在上传\n+  UPLOADING = \"uploading\",\n+  // 已暂停\n+  PAUSED = \"paused\",\n+  // 已完成\n+  DONE = \"done\",\n+  // 即时上传\n+  INSTANT = \"instant\",\n+  // 错误\n+  ERROR = \"error\",\n+  // 合并错误\n+  MERGE_ERROR = \"merge-error\",\n }\n \n export interface UploadFile {\n   id: string; // 唯一ID\n@@ -30,10 +45,10 @@\n \n const CHUNK_SIZE = 1024 * 1024; // 1MB\n \n localforage.config({\n-  name: 'upload-indexeddb',\n-  storeName: 'upload_files',\n+  name: \"upload-indexeddb\",\n+  storeName: \"upload_files\",\n });\n \n const App = () => {\n   const inputRef = useRef<HTMLInputElement>(null);\n@@ -59,94 +74,13 @@\n       createdAt: Date.now(),\n       order: 0,\n     };\n     await localforage.setItem(id, uploadFile);\n-    alert('文件信息已存入indexedDB！');\n+    alert(\"文件信息已存入indexedDB！\");\n   };\n \n   return (\n     <div>\n-      <input\n-        type=\"file\"\n-        ref={inputRef}\n-        onChange={handleFileChange}\n-      />\n-      <div>App</div>\n-    </div>\n-  );\n-};\n-\n-export default App;\n-import React, { useRef } from \"react\";\n-\n-const CHUNK_SIZE = 1024 * 1024; // 1MB\n-\n-const openDB = () => {\n-  return new Promise<IDBDatabase>((resolve, reject) => {\n-    const request = window.indexedDB.open(\"fileDB\", 1);\n-    request.onupgradeneeded = () => {\n-      const db = request.result;\n-      if (!db.objectStoreNames.contains(\"files\")) {\n-        db.createObjectStore(\"files\", { keyPath: \"key\" });\n-      }\n-    };\n-    request.onsuccess = () => resolve(request.result);\n-    request.onerror = () => reject(request.error);\n-  });\n-};\n-\n-type FileDBObj = {\n-  key: string;\n-  name: string;\n-  size: number;\n-  arraybuffer: ArrayBuffer;\n-  chunksize: number;\n-  chunkcount: number;\n-  // chunks?: ArrayBuffer[];\n-};\n-\n-const saveFileToDB = async (fileObj: FileDBObj) => {\n-  const db = await openDB();\n-  const tx = db.transaction(\"files\", \"readwrite\");\n-  const store = tx.objectStore(\"files\");\n-  store.put(fileObj);\n-  return new Promise((resolve, reject) => {\n-    tx.oncomplete = () => resolve(true);\n-    tx.onerror = () => reject(tx.error);\n-  });\n-};\n-\n-const App = () => {\n-  const inputRef = useRef<HTMLInputElement>(null);\n-\n-  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n-    const file = e.target.files?.[0];\n-    if (!file) return;\n-    const arrayBuffer = await file.arrayBuffer();\n-    const chunkSize = CHUNK_SIZE;\n-    const chunkCount = Math.ceil(arrayBuffer.byteLength / chunkSize);\n-    // 分块\n-    const chunks = [];\n-    for (let i = 0; i < chunkCount; i++) {\n-      const start = i * chunkSize;\n-      const end = Math.min(arrayBuffer.byteLength, start + chunkSize);\n-      chunks.push(arrayBuffer.slice(start, end));\n-    }\n-    const fileObj = {\n-      key: Date.now() + \"_\" + file.name,\n-      name: file.name,\n-      size: file.size,\n-      arraybuffer: arrayBuffer,\n-      chunksize: chunkSize,\n-      chunkcount: chunkCount,\n-      // 可选：chunks: chunks,\n-    };\n-    await saveFileToDB(fileObj);\n-    alert(\"文件已存入indexedDB！\");\n-  };\n-\n-  return (\n-    <div>\n       <input type=\"file\" ref={inputRef} onChange={handleFileChange} />\n       <div>App</div>\n     </div>\n   );\n"
                },
                {
                    "date": 1748865028958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n       fileName: file.name,\n       fileSize: file.size,\n       fileType: file.type,\n       lastModified: file.lastModified,\n-      status: UploadStatus.WAITING,\n+      status: UploadStatus.QUEUED,\n       progress: 0,\n       chunkSize,\n       chunkCount,\n       uploadedChunks: 0,\n"
                },
                {
                    "date": 1748865051030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,8 @@\n \n   return (\n     <div>\n       <input type=\"file\" ref={inputRef} onChange={handleFileChange} />\n-      <div>App</div>\n     </div>\n   );\n };\n \n"
                },
                {
                    "date": 1748865264860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useRef } from \"react\";\n \n+import SparkMD5 from \"spark-md5\";\n import localforage from \"localforage\";\n \n export enum UploadStatus {\n   // 上传已排队\n@@ -57,17 +58,21 @@\n     const file = e.target.files?.[0];\n     if (!file) return;\n     const chunkSize = CHUNK_SIZE;\n     const chunkCount = Math.ceil(file.size / chunkSize);\n-    const id = `${Date.now()}_${file.name}`;\n+    // 读取文件内容并计算 hash\n+    const arrayBuffer = await file.arrayBuffer();\n+    const hash = SparkMD5.ArrayBuffer.hash(arrayBuffer);\n+    const id = hash;\n     const uploadFile: UploadFile = {\n       id,\n       fileName: file.name,\n       fileSize: file.size,\n       fileType: file.type,\n       lastModified: file.lastModified,\n       status: UploadStatus.QUEUED,\n       progress: 0,\n+      hash,\n       chunkSize,\n       chunkCount,\n       uploadedChunks: 0,\n       pausedChunks: [],\n"
                },
                {
                    "date": 1748865270331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useRef } from \"react\";\n \n+// @ts-ignore\n import SparkMD5 from \"spark-md5\";\n import localforage from \"localforage\";\n \n export enum UploadStatus {\n"
                },
                {
                    "date": 1748865280455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useRef } from \"react\";\n \n-// @ts-expect-error\n+// @ts-expect-error: spark-md5 没有类型声明文件\n import SparkMD5 from \"spark-md5\";\n import localforage from \"localforage\";\n \n export enum UploadStatus {\n"
                },
                {
                    "date": 1748865349201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,8 @@\n       createdAt: Date.now(),\n       order: 0,\n     };\n     await localforage.setItem(id, uploadFile);\n-    alert(\"文件信息已存入indexedDB！\");\n   };\n \n   return (\n     <div>\n"
                }
            ],
            "date": 1748864354728,
            "name": "Commit-0",
            "content": "const App = () => {\n  return <div>App</div>;\n};\nexport default App;\n"
        }
    ]
}