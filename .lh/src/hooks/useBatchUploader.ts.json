{
    "sourceFile": "src/hooks/useBatchUploader.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1748868743319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748868779196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,17 @@\n-import { UploadFile } from '../App';\r\n-import localforage from 'localforage';\r\n-import { useState } from 'react';\r\n+import { UploadFile } from \"../App\";\r\n+import localforage from \"localforage\";\r\n+import { useState } from \"react\";\r\n \r\n-const workerUrl = new URL('../uploadWorker.ts', import.meta.url).href;\r\n+const workerUrl = new URL(\"../uploadWorker.ts\", import.meta.url).href;\r\n \r\n export function useBatchUploader() {\r\n   const [uploading, setUploading] = useState(false);\r\n   const [uploadProgress, setUploadProgress] = useState(0);\r\n-  const [batchInfo, setBatchInfo] = useState<{ current: number; total: number } | null>(null);\r\n+  const [batchInfo, setBatchInfo] = useState<{\r\n+    current: number;\r\n+    total: number;\r\n+  } | null>(null);\r\n   const [fileInfo, setFileInfo] = useState<UploadFile | null>(null);\r\n \r\n   const uploadAll = async () => {\r\n     const keys = await localforage.keys();\r\n@@ -20,13 +23,15 @@\n       setUploading(true);\r\n       setUploadProgress(0);\r\n       await new Promise<void>((resolve) => {\r\n         const worker = new Worker(workerUrl);\r\n-        worker.postMessage({ fileInfo: data, fileBuffer: data.buffer }, [data.buffer as ArrayBuffer]);\r\n+        worker.postMessage({ fileInfo: data, fileBuffer: data.buffer }, [\r\n+          data.buffer as ArrayBuffer,\r\n+        ]);\r\n         worker.onmessage = (e) => {\r\n-          if (e.data.type === 'progress') {\r\n+          if (e.data.type === \"progress\") {\r\n             setUploadProgress(e.data.progress);\r\n-          } else if (e.data.type === 'done') {\r\n+          } else if (e.data.type === \"done\") {\r\n             setUploading(false);\r\n             setUploadProgress(100);\r\n             // 可根据 e.data.skipped 做提示\r\n             resolve();\r\n@@ -44,5 +49,5 @@\n     uploadProgress,\r\n     batchInfo,\r\n     fileInfo,\r\n   };\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1748868842654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { UploadFile } from \"../App\";\r\n+import { UploadFile } from \"../types/upload\";\r\n import localforage from \"localforage\";\r\n import { useState } from \"react\";\r\n \r\n const workerUrl = new URL(\"../uploadWorker.ts\", import.meta.url).href;\r\n"
                },
                {
                    "date": 1748869794379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { UploadFile } from \"../types/upload\";\r\n import localforage from \"localforage\";\r\n import { useState } from \"react\";\r\n \r\n-const workerUrl = new URL(\"../uploadWorker.ts\", import.meta.url).href;\r\n+const workerUrl = new URL('../worker/uploadWorker.ts', import.meta.url).href;\r\n \r\n export function useBatchUploader() {\r\n   const [uploading, setUploading] = useState(false);\r\n   const [uploadProgress, setUploadProgress] = useState(0);\r\n"
                },
                {
                    "date": 1748869803823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { UploadFile } from \"../types/upload\";\r\n import localforage from \"localforage\";\r\n import { useState } from \"react\";\r\n \r\n-const workerUrl = new URL('../worker/uploadWorker.ts', import.meta.url).href;\r\n+const workerUrl = new URL(\"../worker/uploadWorker.ts\", import.meta.url).href;\r\n \r\n export function useBatchUploader() {\r\n   const [uploading, setUploading] = useState(false);\r\n   const [uploadProgress, setUploadProgress] = useState(0);\r\n"
                },
                {
                    "date": 1748870968507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,13 @@\n import { useState } from \"react\";\r\n \r\n const workerUrl = new URL(\"../worker/uploadWorker.ts\", import.meta.url).href;\r\n \r\n-export function useBatchUploader() {\r\n+interface UseBatchUploaderOptions {\r\n+  setProgressMap?: React.Dispatch<React.SetStateAction<Record<string, number>>>;\r\n+}\r\n+\r\n+export function useBatchUploader(options?: UseBatchUploaderOptions) {\r\n   const [uploading, setUploading] = useState(false);\r\n   const [uploadProgress, setUploadProgress] = useState(0);\r\n   const [batchInfo, setBatchInfo] = useState<{\r\n     current: number;\r\n@@ -21,19 +25,28 @@\n       if (!data || !data.buffer) continue;\r\n       setFileInfo(data);\r\n       setUploading(true);\r\n       setUploadProgress(0);\r\n+      if (options?.setProgressMap)\r\n+        options.setProgressMap((prev) => ({ ...prev, [data.id]: 0 }));\r\n       await new Promise<void>((resolve) => {\r\n         const worker = new Worker(workerUrl);\r\n         worker.postMessage({ fileInfo: data, fileBuffer: data.buffer }, [\r\n           data.buffer as ArrayBuffer,\r\n         ]);\r\n         worker.onmessage = (e) => {\r\n           if (e.data.type === \"progress\") {\r\n             setUploadProgress(e.data.progress);\r\n+            if (options?.setProgressMap)\r\n+              options.setProgressMap((prev) => ({\r\n+                ...prev,\r\n+                [data.id]: e.data.progress,\r\n+              }));\r\n           } else if (e.data.type === \"done\") {\r\n             setUploading(false);\r\n             setUploadProgress(100);\r\n+            if (options?.setProgressMap)\r\n+              options.setProgressMap((prev) => ({ ...prev, [data.id]: 100 }));\r\n             // 可根据 e.data.skipped 做提示\r\n             resolve();\r\n           }\r\n         };\r\n"
                },
                {
                    "date": 1748871055967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n-import { UploadFile } from \"../types/upload\";\r\n+import { UploadFile, UploadStatus } from \"../types/upload\";\r\n+\r\n import localforage from \"localforage\";\r\n import { useState } from \"react\";\r\n \r\n const workerUrl = new URL(\"../worker/uploadWorker.ts\", import.meta.url).href;\r\n \r\n interface UseBatchUploaderOptions {\r\n   setProgressMap?: React.Dispatch<React.SetStateAction<Record<string, number>>>;\r\n+  refreshFiles?: () => void;\r\n }\r\n \r\n export function useBatchUploader(options?: UseBatchUploaderOptions) {\r\n   const [uploading, setUploading] = useState(false);\r\n@@ -27,14 +29,17 @@\n       setUploading(true);\r\n       setUploadProgress(0);\r\n       if (options?.setProgressMap)\r\n         options.setProgressMap((prev) => ({ ...prev, [data.id]: 0 }));\r\n+      // 上传前，状态设为 UPLOADING\r\n+      await localforage.setItem(data.id, { ...data, status: UploadStatus.UPLOADING });\r\n+      if (options?.refreshFiles) options.refreshFiles();\r\n       await new Promise<void>((resolve) => {\r\n         const worker = new Worker(workerUrl);\r\n         worker.postMessage({ fileInfo: data, fileBuffer: data.buffer }, [\r\n           data.buffer as ArrayBuffer,\r\n         ]);\r\n-        worker.onmessage = (e) => {\r\n+        worker.onmessage = async (e) => {\r\n           if (e.data.type === \"progress\") {\r\n             setUploadProgress(e.data.progress);\r\n             if (options?.setProgressMap)\r\n               options.setProgressMap((prev) => ({\r\n@@ -45,9 +50,12 @@\n             setUploading(false);\r\n             setUploadProgress(100);\r\n             if (options?.setProgressMap)\r\n               options.setProgressMap((prev) => ({ ...prev, [data.id]: 100 }));\r\n-            // 可根据 e.data.skipped 做提示\r\n+            // 上传完成或秒传，状态设为 DONE 或 INSTANT\r\n+            const newStatus = e.data.skipped ? UploadStatus.INSTANT : UploadStatus.DONE;\r\n+            await localforage.setItem(data.id, { ...data, status: newStatus });\r\n+            if (options?.refreshFiles) options.refreshFiles();\r\n             resolve();\r\n           }\r\n         };\r\n       });\r\n"
                },
                {
                    "date": 1748871235599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,9 @@\n       });\r\n       if (options?.refreshFiles) options.refreshFiles();\r\n       await new Promise<void>((resolve) => {\r\n         const worker = new Worker(workerUrl);\r\n-        worker.postMessage({ fileInfo: data, fileBuffer: data.buffer }, [\r\n-          data.buffer as ArrayBuffer,\r\n-        ]);\r\n+        worker.postMessage({ fileInfo: data, fileBuffer: data.buffer });\r\n         worker.onmessage = async (e) => {\r\n           if (e.data.type === \"progress\") {\r\n             setUploadProgress(e.data.progress);\r\n             if (options?.setProgressMap)\r\n"
                },
                {
                    "date": 1748871516342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,25 +10,19 @@\n   refreshFiles?: () => void;\r\n }\r\n \r\n export function useBatchUploader(options?: UseBatchUploaderOptions) {\r\n-  const [uploading, setUploading] = useState(false);\r\n-  const [uploadProgress, setUploadProgress] = useState(0);\r\n   const [batchInfo, setBatchInfo] = useState<{\r\n     current: number;\r\n     total: number;\r\n   } | null>(null);\r\n-  const [fileInfo, setFileInfo] = useState<UploadFile | null>(null);\r\n \r\n   const uploadAll = async () => {\r\n     const keys = await localforage.keys();\r\n     setBatchInfo({ current: 0, total: keys.length });\r\n     for (let i = 0; i < keys.length; i++) {\r\n       const data = await localforage.getItem<UploadFile>(keys[i]);\r\n       if (!data || !data.buffer) continue;\r\n-      setFileInfo(data);\r\n-      setUploading(true);\r\n-      setUploadProgress(0);\r\n       if (options?.setProgressMap)\r\n         options.setProgressMap((prev) => ({ ...prev, [data.id]: 0 }));\r\n       // 上传前，状态设为 UPLOADING\r\n       await localforage.setItem(data.id, {\r\n@@ -40,17 +34,14 @@\n         const worker = new Worker(workerUrl);\r\n         worker.postMessage({ fileInfo: data, fileBuffer: data.buffer });\r\n         worker.onmessage = async (e) => {\r\n           if (e.data.type === \"progress\") {\r\n-            setUploadProgress(e.data.progress);\r\n             if (options?.setProgressMap)\r\n               options.setProgressMap((prev) => ({\r\n                 ...prev,\r\n                 [data.id]: e.data.progress,\r\n               }));\r\n           } else if (e.data.type === \"done\") {\r\n-            setUploading(false);\r\n-            setUploadProgress(100);\r\n             if (options?.setProgressMap)\r\n               options.setProgressMap((prev) => ({ ...prev, [data.id]: 100 }));\r\n             // 上传完成或秒传，状态设为 DONE 或 INSTANT\r\n             const newStatus = e.data.skipped\r\n@@ -68,10 +59,7 @@\n   };\r\n \r\n   return {\r\n     uploadAll,\r\n-    uploading,\r\n-    uploadProgress,\r\n     batchInfo,\r\n-    fileInfo,\r\n   };\r\n }\r\n"
                }
            ],
            "date": 1748868743319,
            "name": "Commit-0",
            "content": "import { UploadFile } from '../App';\r\nimport localforage from 'localforage';\r\nimport { useState } from 'react';\r\n\r\nconst workerUrl = new URL('../uploadWorker.ts', import.meta.url).href;\r\n\r\nexport function useBatchUploader() {\r\n  const [uploading, setUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [batchInfo, setBatchInfo] = useState<{ current: number; total: number } | null>(null);\r\n  const [fileInfo, setFileInfo] = useState<UploadFile | null>(null);\r\n\r\n  const uploadAll = async () => {\r\n    const keys = await localforage.keys();\r\n    setBatchInfo({ current: 0, total: keys.length });\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const data = await localforage.getItem<UploadFile>(keys[i]);\r\n      if (!data || !data.buffer) continue;\r\n      setFileInfo(data);\r\n      setUploading(true);\r\n      setUploadProgress(0);\r\n      await new Promise<void>((resolve) => {\r\n        const worker = new Worker(workerUrl);\r\n        worker.postMessage({ fileInfo: data, fileBuffer: data.buffer }, [data.buffer as ArrayBuffer]);\r\n        worker.onmessage = (e) => {\r\n          if (e.data.type === 'progress') {\r\n            setUploadProgress(e.data.progress);\r\n          } else if (e.data.type === 'done') {\r\n            setUploading(false);\r\n            setUploadProgress(100);\r\n            // 可根据 e.data.skipped 做提示\r\n            resolve();\r\n          }\r\n        };\r\n      });\r\n      setBatchInfo({ current: i + 1, total: keys.length });\r\n    }\r\n    setBatchInfo(null);\r\n  };\r\n\r\n  return {\r\n    uploadAll,\r\n    uploading,\r\n    uploadProgress,\r\n    batchInfo,\r\n    fileInfo,\r\n  };\r\n}"
        }
    ]
}