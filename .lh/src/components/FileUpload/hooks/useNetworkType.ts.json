{
    "sourceFile": "src/components/FileUpload/hooks/useNetworkType.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748877734267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748877734267,
            "name": "Commit-0",
            "content": "import { useEffect, useMemo, useRef } from \"react\";\r\n\r\nimport { useNetwork } from \"ahooks\";\r\n\r\n/**\r\n * 网络类型与自适应上传参数 Hook\r\n * 根据网络状况动态计算并发数和切片大小，支持回调通知。\r\n * @param onChange 可选，网络参数变化时的回调，返回 { networkType, fileConcurrency, chunkConcurrency, chunkSize }\r\n * @returns { networkType, fileConcurrency, chunkConcurrency, chunkSize }\r\n */\r\nexport function useNetworkType(\r\n  onChange?: (params: {\r\n    networkType: string;\r\n    fileConcurrency: number;\r\n    chunkConcurrency: number;\r\n    chunkSize: number;\r\n  }) => void\r\n) {\r\n  const network = useNetwork();\r\n  const { rtt, online, effectiveType, type } = network;\r\n\r\n  /**\r\n   * 是否离线\r\n   */\r\n  const isOffline =\r\n    online === false ||\r\n    (typeof window !== \"undefined\" &&\r\n      typeof window.navigator !== \"undefined\" &&\r\n      window.navigator.onLine === false);\r\n\r\n  /**\r\n   * 动态分片并发数（单文件分片上传并发）\r\n   */\r\n  const chunkConcurrency = useMemo(() => {\r\n    if (isOffline) return 0;\r\n    if (typeof rtt === \"number\" && rtt > 0) {\r\n      if (rtt <= 50) return 6;\r\n      if (rtt <= 100) return 4;\r\n      if (rtt <= 200) return 3;\r\n      if (rtt <= 500) return 2;\r\n      if (rtt <= 1000) return 1;\r\n      return 1;\r\n    }\r\n    if (type === \"wifi\") {\r\n      if (effectiveType === \"4g\") return 4;\r\n      if (effectiveType === \"3g\") return 3;\r\n      return 2;\r\n    }\r\n    if (type === \"ethernet\") return 4;\r\n    if (effectiveType === \"4g\") return 3;\r\n    if (effectiveType === \"3g\") return 2;\r\n    if (effectiveType === \"2g\") return 1;\r\n    if (effectiveType === \"slow-2g\") return 1;\r\n    return 2;\r\n  }, [rtt, isOffline, effectiveType, type]);\r\n\r\n  /**\r\n   * 动态文件并发数（同一时刻最大活跃上传文件数）\r\n   * - 网络越好并发越高，网络差并发越低\r\n   */\r\n  const fileConcurrency = useMemo(() => {\r\n    if (isOffline) return 0;\r\n    if (typeof rtt === \"number\" && rtt > 0) {\r\n      if (rtt <= 50) return 4;\r\n      if (rtt <= 100) return 3;\r\n      if (rtt <= 200) return 2;\r\n      if (rtt <= 500) return 1;\r\n      return 1;\r\n    }\r\n    if (type === \"wifi\" || type === \"ethernet\") return 3;\r\n    if (effectiveType === \"4g\") return 2;\r\n    if (effectiveType === \"3g\") return 1;\r\n    return 1;\r\n  }, [rtt, isOffline, effectiveType, type]);\r\n\r\n  /**\r\n   * 动态切片大小（字节）\r\n   * - 网络越好切片越大，网络差切片越小\r\n   */\r\n  const chunkSize = useMemo(() => {\r\n    if (isOffline) return 512 * 1024;\r\n    if (typeof rtt === \"number\" && rtt > 0) {\r\n      if (rtt <= 50) return 8 * 1024 * 1024;\r\n      if (rtt <= 100) return 4 * 1024 * 1024;\r\n      if (rtt <= 200) return 2 * 1024 * 1024;\r\n      if (rtt <= 500) return 1 * 1024 * 1024;\r\n      if (rtt <= 1000) return 512 * 1024;\r\n      return 256 * 1024;\r\n    }\r\n    if (type === \"wifi\" || type === \"ethernet\") return 4 * 1024 * 1024;\r\n    if (effectiveType === \"4g\") return 2 * 1024 * 1024;\r\n    if (effectiveType === \"3g\") return 1 * 1024 * 1024;\r\n    if (effectiveType === \"2g\" || effectiveType === \"slow-2g\")\r\n      return 256 * 1024;\r\n    return 1 * 1024 * 1024;\r\n  }, [rtt, isOffline, effectiveType, type]);\r\n\r\n  /**\r\n   * 网络类型字符串\r\n   */\r\n  const networkType = isOffline\r\n    ? \"offline\"\r\n    : effectiveType || type || \"unknown\";\r\n\r\n  // 变化时触发回调\r\n  const prev = useRef<{\r\n    networkType: string;\r\n    fileConcurrency: number;\r\n    chunkConcurrency: number;\r\n    chunkSize: number;\r\n  }>();\r\n  useEffect(() => {\r\n    if (\r\n      prev.current?.networkType !== networkType ||\r\n      prev.current?.fileConcurrency !== fileConcurrency ||\r\n      prev.current?.chunkConcurrency !== chunkConcurrency ||\r\n      prev.current?.chunkSize !== chunkSize\r\n    ) {\r\n      onChange?.({ networkType, fileConcurrency, chunkConcurrency, chunkSize });\r\n      prev.current = {\r\n        networkType,\r\n        fileConcurrency,\r\n        chunkConcurrency,\r\n        chunkSize,\r\n      };\r\n    }\r\n  }, [networkType, fileConcurrency, chunkConcurrency, chunkSize, onChange]);\r\n\r\n  return { networkType, fileConcurrency, chunkConcurrency, chunkSize };\r\n}\r\n"
        }
    ]
}