{
    "sourceFile": "src/components/FileUpload/worker/filePrepareWorker.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748878285886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748878302261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,12 @@\n   const CHUNK_SIZE = networkParams.chunkSize || 1024 * 1024; // 默认1MB\r\n \r\n   // 记录处理进度\r\n   let processed = 0;\r\n-  let total = files.length;\r\n+  const total = files.length;\r\n   let success = 0;\r\n   let failed = 0;\r\n-  let oversized = 0;\r\n+  const oversized = 0;\r\n \r\n   const globalSelf = self as unknown as SparkMD5Global;\r\n   if (!globalSelf.SparkMD5) {\r\n     importScripts(\r\n"
                },
                {
                    "date": 1748878396358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,14 +77,14 @@\n \r\n       // 发送进度更新\r\n       processed++;\r\n       self.postMessage({\r\n-        type: 'progress',\r\n+        type: \"progress\",\r\n         processed,\r\n         total,\r\n         success,\r\n         failed,\r\n-        oversized\r\n+        oversized,\r\n       });\r\n \r\n       const arrayBuffer = await file.arrayBuffer();\r\n       const hash = globalSelf.SparkMD5.ArrayBuffer.hash(arrayBuffer);\r\n@@ -117,15 +117,15 @@\n   }\r\n \r\n   // 发送完成信息\r\n   self.postMessage({\r\n-    type: 'complete',\r\n+    type: \"complete\",\r\n     uploadFiles,\r\n     stats: {\r\n       processed,\r\n       total,\r\n       success,\r\n       failed,\r\n-      oversized\r\n-    }\r\n+      oversized,\r\n+    },\r\n   });\r\n };\r\n"
                }
            ],
            "date": 1748878285886,
            "name": "Commit-0",
            "content": "/**\r\n * @enum {string}\r\n */\r\nconst UploadStatus = {\r\n  QUEUED: \"queued\",\r\n  QUEUED_FOR_UPLOAD: \"queued-for-upload\",\r\n  CALCULATING: \"calculating\",\r\n  PREPARING_UPLOAD: \"preparing-upload\",\r\n  UPLOADING: \"uploading\",\r\n  PAUSED: \"paused\",\r\n  DONE: \"done\",\r\n  INSTANT: \"instant\",\r\n  ERROR: \"error\",\r\n  MERGE_ERROR: \"merge-error\",\r\n};\r\n\r\n/**\r\n * @typedef {Object} NetworkParams\r\n * @property {number} chunkSize - 分片大小\r\n * @property {number} chunkConcurrency - 分片并发数\r\n * @property {number} fileConcurrency - 文件并发数\r\n * @property {string} networkType - 网络类型\r\n */\r\n\r\n/**\r\n * @typedef {Object} UploadFile\r\n * @property {string} id\r\n * @property {string} fileName\r\n * @property {number} fileSize\r\n * @property {string} fileType\r\n * @property {number} lastModified\r\n * @property {string} status\r\n * @property {number} progress\r\n * @property {string=} hash\r\n * @property {number=} chunkSize\r\n * @property {number=} chunkCount\r\n * @property {number=} uploadedChunks\r\n * @property {number[]=} pausedChunks\r\n * @property {string=} errorMessage\r\n * @property {number} createdAt\r\n * @property {number} order\r\n * @property {ArrayBuffer=} buffer\r\n */\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\ntype SparkMD5Global = {\r\n  SparkMD5: { ArrayBuffer: { hash(buf: ArrayBuffer): string } };\r\n};\r\n\r\nself.onmessage = async (e) => {\r\n  const files = e.data.files;\r\n  // 从传入的网络参数中获取分片大小，如果没有则使用默认值\r\n  const networkParams = e.data.networkParams || {};\r\n  const CHUNK_SIZE = networkParams.chunkSize || 1024 * 1024; // 默认1MB\r\n\r\n  // 记录处理进度\r\n  let processed = 0;\r\n  let total = files.length;\r\n  let success = 0;\r\n  let failed = 0;\r\n  let oversized = 0;\r\n\r\n  const globalSelf = self as unknown as SparkMD5Global;\r\n  if (!globalSelf.SparkMD5) {\r\n    importScripts(\r\n      \"https://cdn.jsdelivr.net/npm/spark-md5@3.0.2/spark-md5.min.js\"\r\n    );\r\n  }\r\n\r\n  const uploadFiles = [];\r\n  for (let i = 0; i < files.length; i++) {\r\n    try {\r\n      const file = files[i];\r\n      const chunkSize = CHUNK_SIZE;\r\n      const chunkCount = Math.ceil(file.size / chunkSize);\r\n\r\n      // 发送进度更新\r\n      processed++;\r\n      self.postMessage({\r\n        type: 'progress',\r\n        processed,\r\n        total,\r\n        success,\r\n        failed,\r\n        oversized\r\n      });\r\n\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const hash = globalSelf.SparkMD5.ArrayBuffer.hash(arrayBuffer);\r\n      const id = hash;\r\n\r\n      /** @type {UploadFile} */\r\n      const uploadFile = {\r\n        id,\r\n        fileName: file.name,\r\n        fileSize: file.size,\r\n        fileType: file.type,\r\n        lastModified: file.lastModified,\r\n        status: UploadStatus.QUEUED,\r\n        progress: 0,\r\n        hash,\r\n        chunkSize,\r\n        chunkCount,\r\n        uploadedChunks: 0,\r\n        pausedChunks: [],\r\n        createdAt: Date.now(),\r\n        order: i,\r\n        buffer: arrayBuffer,\r\n      };\r\n      uploadFiles.push(uploadFile);\r\n      success++;\r\n    } catch (error) {\r\n      console.error(\"Error processing file:\", error);\r\n      failed++;\r\n    }\r\n  }\r\n\r\n  // 发送完成信息\r\n  self.postMessage({\r\n    type: 'complete',\r\n    uploadFiles,\r\n    stats: {\r\n      processed,\r\n      total,\r\n      success,\r\n      failed,\r\n      oversized\r\n    }\r\n  });\r\n};\r\n"
        }
    ]
}