{
    "sourceFile": "src/components/FileUpload/utils/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1748874735881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748918191919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,4 +3,19 @@\n   if (size < 1024 * 1024) return (size / 1024).toFixed(2) + \" KB\";\r\n   if (size < 1024 * 1024 * 1024) return (size / 1024 / 1024).toFixed(2) + \" MB\";\r\n   return (size / 1024 / 1024 / 1024).toFixed(2) + \" GB\";\r\n }\r\n+\r\n+\r\n+// 统计所有文件 buffer 的总字节数\r\n+export async function getTotalCacheSize(): Promise<number> {\r\n+  try {\r\n+    let total = 0;\r\n+    await store.iterate<UploadFileMeta, void>((value) => {\r\n+      total += value.buffer?.byteLength || 0;\r\n+    });\r\n+    return total;\r\n+  } catch (error) {\r\n+    console.error(\"dbService: error calculating total cache size\", error);\r\n+    return 0;\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748918274543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,105 @@\n-export function ByteConvert(size: number): string {\r\n-  if (size < 1024) return size + \" B\";\r\n-  if (size < 1024 * 1024) return (size / 1024).toFixed(2) + \" KB\";\r\n-  if (size < 1024 * 1024 * 1024) return (size / 1024 / 1024).toFixed(2) + \" MB\";\r\n-  return (size / 1024 / 1024 / 1024).toFixed(2) + \" GB\";\r\n+import { UploadFile } from \"../types/upload\";\r\n+import localforage from \"localforage\";\r\n+\r\n+// 字节大小转换为可读格式\r\n+export function ByteConvert(bytes: number): string {\r\n+  if (bytes < 1024) return bytes + \" B\";\r\n+  else if (bytes < 1048576) return (bytes / 1024).toFixed(2) + \" KB\";\r\n+  else if (bytes < 1073741824) return (bytes / 1048576).toFixed(2) + \" MB\";\r\n+  else return (bytes / 1073741824).toFixed(2) + \" GB\";\r\n }\r\n \r\n // 统计所有文件 buffer 的总字节数\r\n export async function getTotalCacheSize(): Promise<number> {\r\n+  let totalSize = 0;\r\n+\r\n   try {\r\n-    let total = 0;\r\n-    await store.iterate<UploadFileMeta, void>((value) => {\r\n-      total += value.buffer?.byteLength || 0;\r\n-    });\r\n-    return total;\r\n+    // 获取所有文件的key\r\n+    const keys = await localforage.keys();\r\n+\r\n+    // 遍历所有key，获取文件数据并计算大小\r\n+    for (const key of keys) {\r\n+      const file = await localforage.getItem<UploadFile>(key);\r\n+      if (file) {\r\n+        // 计算文件本身的大小（元数据）\r\n+        const metadataSize = JSON.stringify(file).length * 2; // 每个字符约占2字节\r\n+\r\n+        // 计算文件buffer的大小（如果存在）\r\n+        const bufferSize = file.buffer ? file.buffer.byteLength : 0;\r\n+\r\n+        // 累加总大小\r\n+        totalSize += metadataSize + bufferSize;\r\n+      }\r\n+    }\r\n+\r\n+    return totalSize;\r\n   } catch (error) {\r\n-    console.error(\"dbService: error calculating total cache size\", error);\r\n-    return 0;\r\n+    console.error(\"计算缓存大小时出错:\", error);\r\n+    return 0; // 出错时返回0\r\n   }\r\n }\r\n+\r\n+// 获取IndexedDB使用量统计信息\r\n+export async function getStorageStats(): Promise<{\r\n+  totalFiles: number;\r\n+  totalSize: number;\r\n+  formattedSize: string;\r\n+  filesWithBuffer: number;\r\n+  filesWithoutBuffer: number;\r\n+  averageFileSize: number;\r\n+  formattedAvgSize: string;\r\n+}> {\r\n+  let totalFiles = 0;\r\n+  let filesWithBuffer = 0;\r\n+  let filesWithoutBuffer = 0;\r\n+  let totalSize = 0;\r\n+\r\n+  try {\r\n+    const keys = await localforage.keys();\r\n+    totalFiles = keys.length;\r\n+\r\n+    for (const key of keys) {\r\n+      const file = await localforage.getItem<UploadFile>(key);\r\n+      if (file) {\r\n+        // 计算文件本身的大小（元数据）\r\n+        const metadataSize = JSON.stringify(file).length * 2; // 每个字符约占2字节\r\n+\r\n+        // 计算文件buffer的大小（如果存在）\r\n+        const bufferSize = file.buffer ? file.buffer.byteLength : 0;\r\n+\r\n+        // 统计文件信息\r\n+        if (file.buffer) {\r\n+          filesWithBuffer++;\r\n+        } else {\r\n+          filesWithoutBuffer++;\r\n+        }\r\n+\r\n+        // 累加总大小\r\n+        totalSize += metadataSize + bufferSize;\r\n+      }\r\n+    }\r\n+\r\n+    const averageFileSize = totalFiles > 0 ? totalSize / totalFiles : 0;\r\n+\r\n+    return {\r\n+      totalFiles,\r\n+      totalSize,\r\n+      formattedSize: ByteConvert(totalSize),\r\n+      filesWithBuffer,\r\n+      filesWithoutBuffer,\r\n+      averageFileSize,\r\n+      formattedAvgSize: ByteConvert(averageFileSize),\r\n+    };\r\n+  } catch (error) {\r\n+    console.error(\"获取存储统计信息时出错:\", error);\r\n+    return {\r\n+      totalFiles: 0,\r\n+      totalSize: 0,\r\n+      formattedSize: \"0 B\",\r\n+      filesWithBuffer: 0,\r\n+      filesWithoutBuffer: 0,\r\n+      averageFileSize: 0,\r\n+      formattedAvgSize: \"0 B\",\r\n+    };\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1748918465874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,38 +8,8 @@\n   else if (bytes < 1073741824) return (bytes / 1048576).toFixed(2) + \" MB\";\r\n   else return (bytes / 1073741824).toFixed(2) + \" GB\";\r\n }\r\n \r\n-// 统计所有文件 buffer 的总字节数\r\n-export async function getTotalCacheSize(): Promise<number> {\r\n-  let totalSize = 0;\r\n-\r\n-  try {\r\n-    // 获取所有文件的key\r\n-    const keys = await localforage.keys();\r\n-\r\n-    // 遍历所有key，获取文件数据并计算大小\r\n-    for (const key of keys) {\r\n-      const file = await localforage.getItem<UploadFile>(key);\r\n-      if (file) {\r\n-        // 计算文件本身的大小（元数据）\r\n-        const metadataSize = JSON.stringify(file).length * 2; // 每个字符约占2字节\r\n-\r\n-        // 计算文件buffer的大小（如果存在）\r\n-        const bufferSize = file.buffer ? file.buffer.byteLength : 0;\r\n-\r\n-        // 累加总大小\r\n-        totalSize += metadataSize + bufferSize;\r\n-      }\r\n-    }\r\n-\r\n-    return totalSize;\r\n-  } catch (error) {\r\n-    console.error(\"计算缓存大小时出错:\", error);\r\n-    return 0; // 出错时返回0\r\n-  }\r\n-}\r\n-\r\n // 获取IndexedDB使用量统计信息\r\n export async function getStorageStats(): Promise<{\r\n   totalFiles: number;\r\n   totalSize: number;\r\n"
                }
            ],
            "date": 1748874735881,
            "name": "Commit-0",
            "content": "export function ByteConvert(size: number): string {\r\n  if (size < 1024) return size + \" B\";\r\n  if (size < 1024 * 1024) return (size / 1024).toFixed(2) + \" KB\";\r\n  if (size < 1024 * 1024 * 1024) return (size / 1024 / 1024).toFixed(2) + \" MB\";\r\n  return (size / 1024 / 1024 / 1024).toFixed(2) + \" GB\";\r\n}\r\n"
        }
    ]
}