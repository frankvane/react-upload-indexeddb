{
    "sourceFile": "src/components/FileUpload/components/FileSelector.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1748872515644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748872535086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,8 @@\n     setFileProgressList(progressArr);\r\n \r\n     // 模拟hash和分片进度\r\n     for (let i = 0; i < files.length; i++) {\r\n-      const file = files[i];\r\n       const uid = progressArr[i].uid;\r\n       // 1. 计算hash\r\n       setFileProgressList((prev) =>\r\n         prev.map((f) =>\r\n"
                },
                {
                    "date": 1748872570719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,10 +79,15 @@\n   };\r\n \r\n   const columns = [\r\n     { title: \"文件名\", dataIndex: \"name\", key: \"name\" },\r\n-    { title: \"大小\", dataIndex: \"size\", key: \"size\", render: (size: number) => `${size} 字节` },\r\n     {\r\n+      title: \"大小\",\r\n+      dataIndex: \"size\",\r\n+      key: \"size\",\r\n+      render: (size: number) => `${size} 字节`,\r\n+    },\r\n+    {\r\n       title: \"状态\",\r\n       dataIndex: \"status\",\r\n       key: \"status\",\r\n       render: (status: string) => {\r\n"
                },
                {
                    "date": 1748872691551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Progress, Table, Tag } from \"antd\";\r\n+import { Progress, Tag } from \"antd\";\r\n import React, { useRef, useState } from \"react\";\r\n \r\n interface FileSelectorProps {\r\n   onFilesSelected: (files: FileList) => void;\r\n@@ -39,8 +39,9 @@\n     setFileProgressList(progressArr);\r\n \r\n     // 模拟hash和分片进度\r\n     for (let i = 0; i < files.length; i++) {\r\n+      const file = files[i];\r\n       const uid = progressArr[i].uid;\r\n       // 1. 计算hash\r\n       setFileProgressList((prev) =>\r\n         prev.map((f) =>\r\n@@ -77,49 +78,28 @@\n     // 处理完成后回调\r\n     onFilesSelected(e.target.files);\r\n   };\r\n \r\n-  const columns = [\r\n-    { title: \"文件名\", dataIndex: \"name\", key: \"name\" },\r\n-    {\r\n-      title: \"大小\",\r\n-      dataIndex: \"size\",\r\n-      key: \"size\",\r\n-      render: (size: number) => `${size} 字节`,\r\n-    },\r\n-    {\r\n-      title: \"状态\",\r\n-      dataIndex: \"status\",\r\n-      key: \"status\",\r\n-      render: (status: string) => {\r\n-        const s = statusMap[status] || { text: status, color: \"default\" };\r\n-        return <Tag color={s.color}>{s.text}</Tag>;\r\n-      },\r\n-    },\r\n-    {\r\n-      title: \"进度\",\r\n-      dataIndex: \"percent\",\r\n-      key: \"percent\",\r\n-      render: (percent: number) => <Progress percent={percent} size=\"small\" />,\r\n-    },\r\n-    {\r\n-      title: \"详情\",\r\n-      dataIndex: \"message\",\r\n-      key: \"message\",\r\n-    },\r\n-  ];\r\n-\r\n   return (\r\n     <div>\r\n       <input type=\"file\" ref={inputRef} onChange={handleChange} multiple />\r\n       {fileProgressList.length > 0 && (\r\n-        <Table\r\n-          columns={columns}\r\n-          dataSource={fileProgressList.map((f) => ({ ...f, key: f.uid }))}\r\n-          pagination={false}\r\n-          size=\"small\"\r\n-          style={{ marginTop: 8 }}\r\n-        />\r\n+        <div style={{ marginTop: 8 }}>\r\n+          {fileProgressList.map((f) => {\r\n+            const s = statusMap[f.status] || { text: f.status, color: \"default\" };\r\n+            return (\r\n+              <div key={f.uid} style={{ marginBottom: 8, border: '1px solid #eee', padding: 8 }}>\r\n+                <div>文件名: {f.name}</div>\r\n+                <div>\r\n+                  状态:\r\n+                  <Tag color={s.color} style={{ marginLeft: 4 }}>{s.text}</Tag>\r\n+                  {f.message && <span style={{ marginLeft: 8 }}>{f.message}</span>}\r\n+                </div>\r\n+                <Progress percent={f.percent} size=\"small\" style={{ width: '90%', marginTop: 4 }} />\r\n+              </div>\r\n+            );\r\n+          })}\r\n+        </div>\r\n       )}\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1748872724280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,8 @@\n     setFileProgressList(progressArr);\r\n \r\n     // 模拟hash和分片进度\r\n     for (let i = 0; i < files.length; i++) {\r\n-      const file = files[i];\r\n       const uid = progressArr[i].uid;\r\n       // 1. 计算hash\r\n       setFileProgressList((prev) =>\r\n         prev.map((f) =>\r\n"
                },
                {
                    "date": 1748872771156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,18 +83,36 @@\n       <input type=\"file\" ref={inputRef} onChange={handleChange} multiple />\r\n       {fileProgressList.length > 0 && (\r\n         <div style={{ marginTop: 8 }}>\r\n           {fileProgressList.map((f) => {\r\n-            const s = statusMap[f.status] || { text: f.status, color: \"default\" };\r\n+            const s = statusMap[f.status] || {\r\n+              text: f.status,\r\n+              color: \"default\",\r\n+            };\r\n             return (\r\n-              <div key={f.uid} style={{ marginBottom: 8, border: '1px solid #eee', padding: 8 }}>\r\n+              <div\r\n+                key={f.uid}\r\n+                style={{\r\n+                  marginBottom: 8,\r\n+                  border: \"1px solid #eee\",\r\n+                  padding: 8,\r\n+                }}\r\n+              >\r\n                 <div>文件名: {f.name}</div>\r\n                 <div>\r\n                   状态:\r\n-                  <Tag color={s.color} style={{ marginLeft: 4 }}>{s.text}</Tag>\r\n-                  {f.message && <span style={{ marginLeft: 8 }}>{f.message}</span>}\r\n+                  <Tag color={s.color} style={{ marginLeft: 4 }}>\r\n+                    {s.text}\r\n+                  </Tag>\r\n+                  {f.message && (\r\n+                    <span style={{ marginLeft: 8 }}>{f.message}</span>\r\n+                  )}\r\n                 </div>\r\n-                <Progress percent={f.percent} size=\"small\" style={{ width: '90%', marginTop: 4 }} />\r\n+                <Progress\r\n+                  percent={f.percent}\r\n+                  size=\"small\"\r\n+                  style={{ width: \"90%\", marginTop: 4 }}\r\n+                />\r\n               </div>\r\n             );\r\n           })}\r\n         </div>\r\n"
                },
                {
                    "date": 1748872953010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,12 @@\n+import { FileProgress, statusMap } from \"../../../../types/upload\";\r\n import { Progress, Tag } from \"antd\";\r\n import React, { useRef, useState } from \"react\";\r\n \r\n interface FileSelectorProps {\r\n   onFilesSelected: (files: FileList) => void;\r\n }\r\n \r\n-interface FileProgress {\r\n-  uid: string;\r\n-  name: string;\r\n-  size: number;\r\n-  status: string;\r\n-  percent: number;\r\n-  hash?: string;\r\n-  message?: string;\r\n-}\r\n-\r\n-const statusMap: Record<string, { text: string; color: string }> = {\r\n-  calculating: { text: \"计算中\", color: \"processing\" },\r\n-  hashing: { text: \"Hash计算\", color: \"processing\" },\r\n-  done: { text: \"已完成\", color: \"green\" },\r\n-  error: { text: \"错误\", color: \"red\" },\r\n-};\r\n-\r\n const FileSelector: React.FC<FileSelectorProps> = ({ onFilesSelected }) => {\r\n   const inputRef = useRef<HTMLInputElement>(null);\r\n   const [fileProgressList, setFileProgressList] = useState<FileProgress[]>([]);\r\n \r\n"
                },
                {
                    "date": 1748872972356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { FileProgress, statusMap } from \"../../../../types/upload\";\r\n+import { FileProgress, statusMap } from \"../../types/upload\";\r\n import { Progress, Tag } from \"antd\";\r\n import React, { useRef, useState } from \"react\";\r\n \r\n interface FileSelectorProps {\r\n"
                },
                {
                    "date": 1748872983805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { FileProgress, statusMap } from \"../../types/upload\";\r\n+import { FileProgress, statusMap } from \"../../../types/upload\";\r\n import { Progress, Tag } from \"antd\";\r\n import React, { useRef, useState } from \"react\";\r\n \r\n interface FileSelectorProps {\r\n"
                },
                {
                    "date": 1748873025216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,29 @@\n-import { FileProgress, statusMap } from \"../../../types/upload\";\r\n import { Progress, Tag } from \"antd\";\r\n import React, { useRef, useState } from \"react\";\r\n+import { FileProgress, statusMap } from \"../../../types/upload\";\r\n \r\n interface FileSelectorProps {\r\n   onFilesSelected: (files: FileList) => void;\r\n }\r\n \r\n+interface FileProgress {\r\n+  uid: string;\r\n+  name: string;\r\n+  size: number;\r\n+  status: string;\r\n+  percent: number;\r\n+  hash?: string;\r\n+  message?: string;\r\n+}\r\n+\r\n+const statusMap: Record<string, { text: string; color: string }> = {\r\n+  calculating: { text: \"计算中\", color: \"processing\" },\r\n+  hashing: { text: \"Hash计算\", color: \"processing\" },\r\n+  done: { text: \"已完成\", color: \"green\" },\r\n+  error: { text: \"错误\", color: \"red\" },\r\n+};\r\n+\r\n const FileSelector: React.FC<FileSelectorProps> = ({ onFilesSelected }) => {\r\n   const inputRef = useRef<HTMLInputElement>(null);\r\n   const [fileProgressList, setFileProgressList] = useState<FileProgress[]>([]);\r\n \r\n"
                },
                {
                    "date": 1748873059103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Progress, Tag } from \"antd\";\r\n import React, { useRef, useState } from \"react\";\r\n-import { FileProgress, statusMap } from \"../../../types/upload\";\r\n+import { FileProgress, statusMap ,FileSelectorProps} from \"../../../types/upload\";\r\n \r\n interface FileSelectorProps {\r\n   onFilesSelected: (files: FileList) => void;\r\n }\r\n"
                },
                {
                    "date": 1748873068296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Progress, Tag } from \"antd\";\r\n import React, { useRef, useState } from \"react\";\r\n-import { FileProgress, statusMap, FileSelectorProps } from \"../../types/upload\";\r\n+import { FileProgress, statusMap, FileSelectorProps } from \"../types/upload\";\r\n \r\n interface FileSelectorProps {\r\n   onFilesSelected: (files: FileList) => void;\r\n }\r\n"
                },
                {
                    "date": 1748873527146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import { FileProgress, FileSelectorProps, statusMap } from \"../types/upload\";\r\n+import { Progress, Tag } from \"antd\";\r\n import React, { useRef, useState } from \"react\";\r\n \r\n-import { Tag } from \"antd\";\r\n-\r\n const FileSelector: React.FC<FileSelectorProps> = ({ onFilesSelected }) => {\r\n   const inputRef = useRef<HTMLInputElement>(null);\r\n   const [fileProgressList, setFileProgressList] = useState<FileProgress[]>([]);\r\n \r\n@@ -77,15 +76,26 @@\n                   border: \"1px solid #eee\",\r\n                   padding: 8,\r\n                 }}\r\n               >\r\n-                <div>文件名: {f.name}</div>\r\n-                <div>\r\n+                {/* <div>文件名: {f.name}</div> */}\r\n+                {/* <div>\r\n                   状态:\r\n                   <Tag color={s.color} style={{ marginLeft: 4 }}>\r\n                     {s.text}\r\n                   </Tag>\r\n-                </div>\r\n+                  {f.message && (\r\n+                    <span style={{ marginLeft: 8 }}>{f.message}</span>\r\n+                  )}\r\n+                </div> */}\r\n+                {f.message && (\r\n+                  <div style={{ marginBottom: 4 }}>{f.message}</div>\r\n+                )}\r\n+                <Progress\r\n+                  percent={f.percent}\r\n+                  size=\"small\"\r\n+                  style={{ width: \"90%\", marginTop: 4 }}\r\n+                />\r\n               </div>\r\n             );\r\n           })}\r\n         </div>\r\n"
                }
            ],
            "date": 1748872515644,
            "name": "Commit-0",
            "content": "import { Progress, Table, Tag } from \"antd\";\r\nimport React, { useRef, useState } from \"react\";\r\n\r\ninterface FileSelectorProps {\r\n  onFilesSelected: (files: FileList) => void;\r\n}\r\n\r\ninterface FileProgress {\r\n  uid: string;\r\n  name: string;\r\n  size: number;\r\n  status: string;\r\n  percent: number;\r\n  hash?: string;\r\n  message?: string;\r\n}\r\n\r\nconst statusMap: Record<string, { text: string; color: string }> = {\r\n  calculating: { text: \"计算中\", color: \"processing\" },\r\n  hashing: { text: \"Hash计算\", color: \"processing\" },\r\n  done: { text: \"已完成\", color: \"green\" },\r\n  error: { text: \"错误\", color: \"red\" },\r\n};\r\n\r\nconst FileSelector: React.FC<FileSelectorProps> = ({ onFilesSelected }) => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [fileProgressList, setFileProgressList] = useState<FileProgress[]>([]);\r\n\r\n  const handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!e.target.files || e.target.files.length === 0) return;\r\n    const files = Array.from(e.target.files);\r\n    const progressArr: FileProgress[] = files.map((file) => ({\r\n      uid: `${file.name}_${file.size}_${file.lastModified}`,\r\n      name: file.name,\r\n      size: file.size,\r\n      status: \"calculating\",\r\n      percent: 0,\r\n    }));\r\n    setFileProgressList(progressArr);\r\n\r\n    // 模拟hash和分片进度\r\n    for (let i = 0; i < files.length; i++) {\r\n      const file = files[i];\r\n      const uid = progressArr[i].uid;\r\n      // 1. 计算hash\r\n      setFileProgressList((prev) =>\r\n        prev.map((f) =>\r\n          f.uid === uid ? { ...f, status: \"hashing\", percent: 10 } : f\r\n        )\r\n      );\r\n      // 模拟hash耗时\r\n      await new Promise((res) => setTimeout(res, 500));\r\n      // 2. 分片进度\r\n      for (let p = 1; p <= 4; p++) {\r\n        setFileProgressList((prev) =>\r\n          prev.map((f) =>\r\n            f.uid === uid\r\n              ? {\r\n                  ...f,\r\n                  status: \"calculating\",\r\n                  percent: 10 + p * 20,\r\n                  message: `分片${p}/4`,\r\n                }\r\n              : f\r\n          )\r\n        );\r\n        await new Promise((res) => setTimeout(res, 300));\r\n      }\r\n      // 3. 完成\r\n      setFileProgressList((prev) =>\r\n        prev.map((f) =>\r\n          f.uid === uid\r\n            ? { ...f, status: \"done\", percent: 100, message: \"\" }\r\n            : f\r\n        )\r\n      );\r\n    }\r\n    // 处理完成后回调\r\n    onFilesSelected(e.target.files);\r\n  };\r\n\r\n  const columns = [\r\n    { title: \"文件名\", dataIndex: \"name\", key: \"name\" },\r\n    { title: \"大小\", dataIndex: \"size\", key: \"size\", render: (size: number) => `${size} 字节` },\r\n    {\r\n      title: \"状态\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      render: (status: string) => {\r\n        const s = statusMap[status] || { text: status, color: \"default\" };\r\n        return <Tag color={s.color}>{s.text}</Tag>;\r\n      },\r\n    },\r\n    {\r\n      title: \"进度\",\r\n      dataIndex: \"percent\",\r\n      key: \"percent\",\r\n      render: (percent: number) => <Progress percent={percent} size=\"small\" />,\r\n    },\r\n    {\r\n      title: \"详情\",\r\n      dataIndex: \"message\",\r\n      key: \"message\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" ref={inputRef} onChange={handleChange} multiple />\r\n      {fileProgressList.length > 0 && (\r\n        <Table\r\n          columns={columns}\r\n          dataSource={fileProgressList.map((f) => ({ ...f, key: f.uid }))}\r\n          pagination={false}\r\n          size=\"small\"\r\n          style={{ marginTop: 8 }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileSelector;\r\n"
        }
    ]
}