{
    "sourceFile": "src/components/FileUpload/components/FileTable.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748872198460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748872209923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Progress, Table, Tag } from \"antd\";\r\n \r\n import React from \"react\";\r\n-import { UploadFile } from \"../../../types/upload\";\r\n+import { UploadFile } from \"../types/upload\";\r\n \r\n const statusMap: Record<string, { text: string; color: string }> = {\r\n   queued: { text: \"排队中\", color: \"default\" },\r\n   \"queued-for-upload\": { text: \"等待上传\", color: \"default\" },\r\n"
                },
                {
                    "date": 1748961694193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,163 @@\n- \n\\ No newline at end of file\n+import {\r\n+  AlignItem,\r\n+  UploadFile,\r\n+  UploadStatus,\r\n+  statusMap,\r\n+} from \"../types/upload\";\r\n+import { Button, Table, Tag, Tooltip } from \"antd\";\r\n+\r\n+import { ByteConvert } from \"../utils\";\r\n+import PercentDisplay from \"./PercentDisplay\";\r\n+import React from \"react\";\r\n+\r\n+interface FileTableProps {\r\n+  files: UploadFile[];\r\n+  progressMap: Record<string, number>;\r\n+  retryingFiles: Record<string, boolean>;\r\n+  isUploading: boolean;\r\n+  isNetworkOffline: boolean;\r\n+  onDeleteFile: (id: string) => Promise<void>;\r\n+  onRetryUpload: (file: UploadFile) => Promise<void>;\r\n+}\r\n+\r\n+const FileTable: React.FC<FileTableProps> = ({\r\n+  files,\r\n+  progressMap,\r\n+  retryingFiles,\r\n+  isUploading,\r\n+  isNetworkOffline,\r\n+  onDeleteFile,\r\n+  onRetryUpload,\r\n+}) => {\r\n+  // Table columns 配置\r\n+  const columns = [\r\n+    {\r\n+      title: \"编号\",\r\n+      dataIndex: \"ID\",\r\n+      key: \"index\",\r\n+      render: (_: unknown, record: UploadFile) => {\r\n+        const index = files.findIndex((f) => f.id === record.id);\r\n+        return index + 1;\r\n+      },\r\n+      align: \"center\" as AlignItem,\r\n+      width: \"10%\",\r\n+    },\r\n+    { title: \"文件名\", dataIndex: \"fileName\", key: \"fileName\" },\r\n+    {\r\n+      title: \"大小\",\r\n+      dataIndex: \"fileSize\",\r\n+      key: \"fileSize\",\r\n+      render: (size: number) => `${ByteConvert(size)}`,\r\n+      align: \"right\" as AlignItem,\r\n+      width: \"10%\",\r\n+    },\r\n+    {\r\n+      title: \"分片数\",\r\n+      dataIndex: \"chunkCount\",\r\n+      key: \"chunkCount\",\r\n+      align: \"center\" as AlignItem,\r\n+      width: \"10%\",\r\n+    },\r\n+    {\r\n+      title: \"状态\",\r\n+      dataIndex: \"status\",\r\n+      key: \"status\",\r\n+      render: (status: string) => {\r\n+        const s = statusMap[status] || { text: status, color: \"default\" };\r\n+        return <Tag color={s.color}>{s.text}</Tag>;\r\n+      },\r\n+      align: \"center\" as AlignItem,\r\n+      width: \"10%\",\r\n+    },\r\n+    {\r\n+      title: \"进度\",\r\n+      dataIndex: \"progress\",\r\n+      key: \"progress\",\r\n+      render: (_: unknown, record: UploadFile) => {\r\n+        if (\r\n+          record.status === UploadStatus.DONE ||\r\n+          record.status === UploadStatus.INSTANT\r\n+        ) {\r\n+          return <PercentDisplay percent={100} status=\"success\" />;\r\n+        }\r\n+        if (\r\n+          record.status === UploadStatus.ERROR ||\r\n+          record.status === UploadStatus.MERGE_ERROR\r\n+        ) {\r\n+          return <PercentDisplay percent={record.progress} status=\"error\" />;\r\n+        }\r\n+        if (record.status === UploadStatus.CALCULATING) {\r\n+          return (\r\n+            <Tooltip title={`MD5计算进度: ${record.progress}%`}>\r\n+              <PercentDisplay percent={record.progress} status=\"active\" />\r\n+            </Tooltip>\r\n+          );\r\n+        }\r\n+        if (record.status === UploadStatus.UPLOADING) {\r\n+          return <PercentDisplay percent={record.progress} status=\"active\" />;\r\n+        }\r\n+        // 其他状态\r\n+        return <PercentDisplay percent={record.progress} status=\"normal\" />;\r\n+      },\r\n+      align: \"center\" as AlignItem,\r\n+      width: \"15%\",\r\n+    },\r\n+    {\r\n+      title: \"操作\",\r\n+      dataIndex: \"action\",\r\n+      key: \"action\",\r\n+      render: (_: unknown, record: UploadFile) => {\r\n+        const { status, id } = record;\r\n+        const isRetrying = retryingFiles[id] || false;\r\n+\r\n+        // 文件是否可以进行操作（网络断开时禁用操作）\r\n+        const isActionDisabled = isUploading || isRetrying || isNetworkOffline;\r\n+\r\n+        return (\r\n+          <div\r\n+            style={{ display: \"flex\", gap: \"8px\", justifyContent: \"center\" }}\r\n+          >\r\n+            {status === UploadStatus.ERROR && (\r\n+              <Button\r\n+                size=\"small\"\r\n+                type=\"primary\"\r\n+                onClick={() => onRetryUpload(record)}\r\n+                loading={isRetrying}\r\n+                disabled={isActionDisabled}\r\n+                title={isNetworkOffline ? \"网络已断开，无法重试\" : \"\"}\r\n+              >\r\n+                {isRetrying ? \"重试中\" : \"重试\"}\r\n+              </Button>\r\n+            )}\r\n+            <Button\r\n+              size=\"small\"\r\n+              danger\r\n+              onClick={() => onDeleteFile(id)}\r\n+              disabled={isRetrying || isUploading}\r\n+            >\r\n+              删除\r\n+            </Button>\r\n+          </div>\r\n+        );\r\n+      },\r\n+      align: \"center\" as AlignItem,\r\n+      width: \"15%\",\r\n+    },\r\n+  ];\r\n+\r\n+  return (\r\n+    <Table\r\n+      columns={columns}\r\n+      dataSource={files.map((f) => ({\r\n+        ...f,\r\n+        key: f.id,\r\n+        progress: progressMap[f.id] ?? f.progress ?? 0,\r\n+      }))}\r\n+      pagination={false}\r\n+      bordered\r\n+      style={{ marginTop: 16 }}\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+export default FileTable;\r\n"
                }
            ],
            "date": 1748872198460,
            "name": "Commit-0",
            "content": "import { Progress, Table, Tag } from \"antd\";\r\n\r\nimport React from \"react\";\r\nimport { UploadFile } from \"../../../types/upload\";\r\n\r\nconst statusMap: Record<string, { text: string; color: string }> = {\r\n  queued: { text: \"排队中\", color: \"default\" },\r\n  \"queued-for-upload\": { text: \"等待上传\", color: \"default\" },\r\n  calculating: { text: \"计算中\", color: \"processing\" },\r\n  \"preparing-upload\": { text: \"准备上传\", color: \"processing\" },\r\n  uploading: { text: \"上传中\", color: \"blue\" },\r\n  paused: { text: \"已暂停\", color: \"orange\" },\r\n  done: { text: \"已完成\", color: \"green\" },\r\n  instant: { text: \"秒传\", color: \"cyan\" },\r\n  error: { text: \"错误\", color: \"red\" },\r\n  \"merge-error\": { text: \"合并错误\", color: \"red\" },\r\n};\r\n\r\ninterface FileTableProps {\r\n  files: UploadFile[];\r\n  progressMap: Record<string, number>;\r\n  batchInfo?: { current: number; total: number } | null;\r\n}\r\n\r\nconst columns = [\r\n  { title: \"文件名\", dataIndex: \"fileName\", key: \"fileName\" },\r\n  {\r\n    title: \"大小\",\r\n    dataIndex: \"fileSize\",\r\n    key: \"fileSize\",\r\n    render: (size: number) => `${size} 字节`,\r\n  },\r\n  { title: \"分片数\", dataIndex: \"chunkCount\", key: \"chunkCount\" },\r\n  {\r\n    title: \"状态\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n    render: (status: string) => {\r\n      const s = statusMap[status] || { text: status, color: \"default\" };\r\n      return <Tag color={s.color}>{s.text}</Tag>;\r\n    },\r\n  },\r\n  {\r\n    title: \"进度\",\r\n    dataIndex: \"progress\",\r\n    key: \"progress\",\r\n    render: (progress: number) => <Progress percent={progress} size=\"small\" />,\r\n  },\r\n];\r\n\r\nconst FileTable: React.FC<FileTableProps> = ({\r\n  files,\r\n  progressMap,\r\n  batchInfo,\r\n}) => {\r\n  return (\r\n    <div style={{ marginTop: 8 }}>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={files.map((f) => ({\r\n          ...f,\r\n          key: f.id,\r\n          progress: progressMap[f.id] ?? 0,\r\n        }))}\r\n        pagination={false}\r\n        bordered\r\n      />\r\n      {batchInfo && (\r\n        <div style={{ marginTop: 8, color: \"purple\" }}>\r\n          批量上传进度：{batchInfo.current}/{batchInfo.total}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileTable;\r\n"
        }
    ]
}