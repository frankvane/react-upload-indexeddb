{
    "sourceFile": "src/components/FileUpload/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1748871871865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748871888862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n import { Progress, Table, Tag } from \"antd\";\r\n import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n import localforage from \"localforage\";\r\n-import { useBatchUploader } from \"./components/FileUpload/hooks/useBatchUploader\";\r\n-import { useIndexedDBFiles } from \"./components/FileUpload/hooks/useIndexedDBFiles\";\r\n+import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n+import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n \r\n localforage.config({\r\n   name: \"upload-indexeddb\",\r\n   storeName: \"upload_files\",\r\n"
                },
                {
                    "date": 1748871914664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   name: \"upload-indexeddb\",\r\n   storeName: \"upload_files\",\r\n });\r\n \r\n-const App = () => {\r\n+const FileUpload = () => {\r\n   const inputRef = useRef<HTMLInputElement>(null);\r\n   const [loading, setLoading] = useState(false);\r\n   const [cost, setCost] = useState<number | null>(null);\r\n   const [progressMap, setProgressMap] = useState<Record<string, number>>({});\r\n@@ -127,5 +127,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default App;\r\n+export default FileUpload;\r\n"
                },
                {
                    "date": 1748872270969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n import \"antd/dist/reset.css\";\r\n \r\n-import { Progress, Table, Tag } from \"antd\";\r\n import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n+import FileSelector from \"./components/FileSelector\";\r\n+import FileTable from \"./components/FileTable\";\r\n+import UploadButton from \"./components/UploadButton\";\r\n import localforage from \"localforage\";\r\n import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n \r\n@@ -12,9 +14,8 @@\n   storeName: \"upload_files\",\r\n });\r\n \r\n const FileUpload = () => {\r\n-  const inputRef = useRef<HTMLInputElement>(null);\r\n   const [loading, setLoading] = useState(false);\r\n   const [cost, setCost] = useState<number | null>(null);\r\n   const [progressMap, setProgressMap] = useState<Record<string, number>>({});\r\n   const { files: allFiles, refresh: refreshFiles } = useIndexedDBFiles();\r\n@@ -31,10 +32,9 @@\n   useEffect(() => {\r\n     refreshFiles();\r\n   }, [refreshFiles]);\r\n \r\n-  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const files = e.target.files;\r\n+  const handleFileChange = async (files: FileList) => {\r\n     if (!files || files.length === 0) return;\r\n     setLoading(true);\r\n     setCost(null);\r\n     const start = Date.now();\r\n@@ -52,79 +52,21 @@\n       setTimeout(() => setCost(null), 3000);\r\n     };\r\n   };\r\n \r\n-  const statusMap: Record<string, { text: string; color: string }> = {\r\n-    queued: { text: \"排队中\", color: \"default\" },\r\n-    \"queued-for-upload\": { text: \"等待上传\", color: \"default\" },\r\n-    calculating: { text: \"计算中\", color: \"processing\" },\r\n-    \"preparing-upload\": { text: \"准备上传\", color: \"processing\" },\r\n-    paused: { text: \"已暂停\", color: \"orange\" },\r\n-    done: { text: \"已完成\", color: \"green\" },\r\n-    instant: { text: \"秒传\", color: \"cyan\" },\r\n-    error: { text: \"错误\", color: \"red\" },\r\n-    \"merge-error\": { text: \"合并错误\", color: \"red\" },\r\n-  };\r\n-\r\n-  // Table columns 配置\r\n-  const columns = [\r\n-    { title: \"文件名\", dataIndex: \"fileName\", key: \"fileName\" },\r\n-    {\r\n-      title: \"大小\",\r\n-      dataIndex: \"fileSize\",\r\n-      key: \"fileSize\",\r\n-      render: (size: number) => `${size} 字节`,\r\n-    },\r\n-    { title: \"分片数\", dataIndex: \"chunkCount\", key: \"chunkCount\" },\r\n-    {\r\n-      title: \"状态\",\r\n-      dataIndex: \"status\",\r\n-      key: \"status\",\r\n-      render: (status: string) => {\r\n-        const s = statusMap[status] || { text: status, color: \"default\" };\r\n-        return <Tag color={s.color}>{s.text}</Tag>;\r\n-      },\r\n-    },\r\n-    {\r\n-      title: \"进度\",\r\n-      dataIndex: \"progress\",\r\n-      key: \"progress\",\r\n-      render: (progress: number) => (\r\n-        <Progress percent={progress} size=\"small\" />\r\n-      ),\r\n-    },\r\n-  ];\r\n-\r\n   return (\r\n     <div>\r\n-      <input type=\"file\" ref={inputRef} onChange={handleFileChange} multiple />\r\n-      <button onClick={uploadAll} style={{ marginLeft: 8 }}>\r\n-        上传文件\r\n-      </button>\r\n+      <FileSelector onFilesSelected={handleFileChange} />\r\n+      <UploadButton onUpload={uploadAll} />\r\n       {loading && <div style={{ color: \"blue\" }}>处理中...</div>}\r\n       {cost !== null && !loading && (\r\n         <div style={{ color: \"green\" }}>操作耗时：{cost} ms</div>\r\n       )}\r\n-\r\n-      {batchInfo && (\r\n-        <div style={{ marginTop: 8, color: \"purple\" }}>\r\n-          批量上传进度：{batchInfo.current}/{batchInfo.total}\r\n-        </div>\r\n-      )}\r\n-      {allFiles.length > 0 && (\r\n-        <div style={{ marginTop: 8 }}>\r\n-          <Table\r\n-            columns={columns}\r\n-            dataSource={allFiles.map((f) => ({\r\n-              ...f,\r\n-              key: f.id,\r\n-              progress: progressMap[f.id] ?? 0,\r\n-            }))}\r\n-            pagination={false}\r\n-            bordered\r\n-          />\r\n-        </div>\r\n-      )}\r\n+      <FileTable\r\n+        files={allFiles}\r\n+        progressMap={progressMap}\r\n+        batchInfo={batchInfo}\r\n+      />\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748872306953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import \"antd/dist/reset.css\";\r\n \r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n+import { useEffect, useState } from \"react\";\r\n \r\n import FileSelector from \"./components/FileSelector\";\r\n import FileTable from \"./components/FileTable\";\r\n import UploadButton from \"./components/UploadButton\";\r\n"
                },
                {
                    "date": 1748874149305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,12 +56,9 @@\n   return (\r\n     <div>\r\n       <FileSelector onFilesSelected={handleFileChange} />\r\n       <UploadButton onUpload={uploadAll} />\r\n-      {loading && <div style={{ color: \"blue\" }}>处理中...</div>}\r\n-      {cost !== null && !loading && (\r\n-        <div style={{ color: \"green\" }}>操作耗时：{cost} ms</div>\r\n-      )}\r\n+\r\n       <FileTable\r\n         files={allFiles}\r\n         progressMap={progressMap}\r\n         batchInfo={batchInfo}\r\n"
                },
                {
                    "date": 1748874156638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,8 @@\n   storeName: \"upload_files\",\r\n });\r\n \r\n const FileUpload = () => {\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [cost, setCost] = useState<number | null>(null);\r\n   const [progressMap, setProgressMap] = useState<Record<string, number>>({});\r\n   const { files: allFiles, refresh: refreshFiles } = useIndexedDBFiles();\r\n   const { uploadAll, batchInfo } = useBatchUploader({\r\n     setProgressMap,\r\n"
                },
                {
                    "date": 1748874175151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,23 +32,16 @@\n   }, [refreshFiles]);\r\n \r\n   const handleFileChange = async (files: FileList) => {\r\n     if (!files || files.length === 0) return;\r\n-    setLoading(true);\r\n-    setCost(null);\r\n-    const start = Date.now();\r\n     const worker = new Worker(filePrepareWorkerUrl);\r\n     worker.postMessage({ files });\r\n     worker.onmessage = async (event) => {\r\n       const { uploadFiles } = event.data;\r\n       for (const uploadFile of uploadFiles) {\r\n         await localforage.setItem(uploadFile.id, uploadFile);\r\n       }\r\n       await refreshFiles();\r\n-      const end = Date.now();\r\n-      setCost(end - start);\r\n-      setLoading(false);\r\n-      setTimeout(() => setCost(null), 3000);\r\n     };\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1748874190212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,8 @@\n   return (\r\n     <div>\r\n       <FileSelector onFilesSelected={handleFileChange} />\r\n       <UploadButton onUpload={uploadAll} />\r\n-\r\n       <FileTable\r\n         files={allFiles}\r\n         progressMap={progressMap}\r\n         batchInfo={batchInfo}\r\n"
                },
                {
                    "date": 1748874217585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,10 @@\n   storeName: \"upload_files\",\r\n });\r\n \r\n const FileUpload = () => {\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [cost, setCost] = useState<number | null>(null);\r\n   const [progressMap, setProgressMap] = useState<Record<string, number>>({});\r\n   const { files: allFiles, refresh: refreshFiles } = useIndexedDBFiles();\r\n   const { uploadAll, batchInfo } = useBatchUploader({\r\n     setProgressMap,\r\n@@ -32,23 +34,34 @@\n   }, [refreshFiles]);\r\n \r\n   const handleFileChange = async (files: FileList) => {\r\n     if (!files || files.length === 0) return;\r\n+    setLoading(true);\r\n+    setCost(null);\r\n+    const start = Date.now();\r\n     const worker = new Worker(filePrepareWorkerUrl);\r\n     worker.postMessage({ files });\r\n     worker.onmessage = async (event) => {\r\n       const { uploadFiles } = event.data;\r\n       for (const uploadFile of uploadFiles) {\r\n         await localforage.setItem(uploadFile.id, uploadFile);\r\n       }\r\n       await refreshFiles();\r\n+      const end = Date.now();\r\n+      setCost(end - start);\r\n+      setLoading(false);\r\n+      setTimeout(() => setCost(null), 3000);\r\n     };\r\n   };\r\n \r\n   return (\r\n     <div>\r\n       <FileSelector onFilesSelected={handleFileChange} />\r\n       <UploadButton onUpload={uploadAll} />\r\n+      {loading && <div style={{ color: \"blue\" }}>处理中...</div>}\r\n+      {cost !== null && !loading && (\r\n+        <div style={{ color: \"green\" }}>操作耗时：{cost} ms</div>\r\n+      )}\r\n       <FileTable\r\n         files={allFiles}\r\n         progressMap={progressMap}\r\n         batchInfo={batchInfo}\r\n"
                },
                {
                    "date": 1748874255117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,12 +56,8 @@\n   return (\r\n     <div>\r\n       <FileSelector onFilesSelected={handleFileChange} />\r\n       <UploadButton onUpload={uploadAll} />\r\n-      {loading && <div style={{ color: \"blue\" }}>处理中...</div>}\r\n-      {cost !== null && !loading && (\r\n-        <div style={{ color: \"green\" }}>操作耗时：{cost} ms</div>\r\n-      )}\r\n       <FileTable\r\n         files={allFiles}\r\n         progressMap={progressMap}\r\n         batchInfo={batchInfo}\r\n"
                },
                {
                    "date": 1748874266721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,8 @@\n   }, [refreshFiles]);\r\n \r\n   const handleFileChange = async (files: FileList) => {\r\n     if (!files || files.length === 0) return;\r\n-    setLoading(true);\r\n-    setCost(null);\r\n     const start = Date.now();\r\n     const worker = new Worker(filePrepareWorkerUrl);\r\n     worker.postMessage({ files });\r\n     worker.onmessage = async (event) => {\r\n@@ -43,12 +41,8 @@\n       for (const uploadFile of uploadFiles) {\r\n         await localforage.setItem(uploadFile.id, uploadFile);\r\n       }\r\n       await refreshFiles();\r\n-      const end = Date.now();\r\n-      setCost(end - start);\r\n-      setLoading(false);\r\n-      setTimeout(() => setCost(null), 3000);\r\n     };\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1748874329605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,29 +14,21 @@\n   storeName: \"upload_files\",\r\n });\r\n \r\n const FileUpload = () => {\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [cost, setCost] = useState<number | null>(null);\r\n   const [progressMap, setProgressMap] = useState<Record<string, number>>({});\r\n   const { files: allFiles, refresh: refreshFiles } = useIndexedDBFiles();\r\n   const { uploadAll, batchInfo } = useBatchUploader({\r\n     setProgressMap,\r\n     refreshFiles,\r\n   });\r\n \r\n-  const filePrepareWorkerUrl = new URL(\r\n-    \"./worker/filePrepareWorker.ts\",\r\n-    import.meta.url\r\n-  ).href;\r\n-\r\n   useEffect(() => {\r\n     refreshFiles();\r\n   }, [refreshFiles]);\r\n \r\n   const handleFileChange = async (files: FileList) => {\r\n     if (!files || files.length === 0) return;\r\n-    const start = Date.now();\r\n     const worker = new Worker(filePrepareWorkerUrl);\r\n     worker.postMessage({ files });\r\n     worker.onmessage = async (event) => {\r\n       const { uploadFiles } = event.data;\r\n"
                },
                {
                    "date": 1748874351964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n   };\r\n \r\n   return (\r\n     <div>\r\n-      <FileSelector onFilesSelected={handleFileChange} />\r\n+      <FileSelector />\r\n       <UploadButton onUpload={uploadAll} />\r\n       <FileTable\r\n         files={allFiles}\r\n         progressMap={progressMap}\r\n"
                },
                {
                    "date": 1748874591086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n import \"antd/dist/reset.css\";\r\n \r\n-import { useEffect, useState } from \"react\";\r\n+import { Progress, Table, Tag } from \"antd\";\r\n+import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n-import FileSelector from \"./components/FileSelector\";\r\n-import FileTable from \"./components/FileTable\";\r\n-import UploadButton from \"./components/UploadButton\";\r\n import localforage from \"localforage\";\r\n import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n \r\n@@ -14,8 +12,11 @@\n   storeName: \"upload_files\",\r\n });\r\n \r\n const FileUpload = () => {\r\n+  const inputRef = useRef<HTMLInputElement>(null);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [cost, setCost] = useState<number | null>(null);\r\n   const [progressMap, setProgressMap] = useState<Record<string, number>>({});\r\n   const { files: allFiles, refresh: refreshFiles } = useIndexedDBFiles();\r\n   const { uploadAll, batchInfo } = useBatchUploader({\r\n     setProgressMap,\r\n@@ -30,31 +31,100 @@\n   useEffect(() => {\r\n     refreshFiles();\r\n   }, [refreshFiles]);\r\n \r\n-  const handleFileChange = async (files: FileList) => {\r\n+  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const files = e.target.files;\r\n     if (!files || files.length === 0) return;\r\n+    setLoading(true);\r\n+    setCost(null);\r\n+    const start = Date.now();\r\n     const worker = new Worker(filePrepareWorkerUrl);\r\n     worker.postMessage({ files });\r\n     worker.onmessage = async (event) => {\r\n       const { uploadFiles } = event.data;\r\n       for (const uploadFile of uploadFiles) {\r\n         await localforage.setItem(uploadFile.id, uploadFile);\r\n       }\r\n       await refreshFiles();\r\n+      const end = Date.now();\r\n+      setCost(end - start);\r\n+      setLoading(false);\r\n+      setTimeout(() => setCost(null), 3000);\r\n     };\r\n   };\r\n \r\n+  const statusMap: Record<string, { text: string; color: string }> = {\r\n+    queued: { text: \"排队中\", color: \"default\" },\r\n+    \"queued-for-upload\": { text: \"等待上传\", color: \"default\" },\r\n+    calculating: { text: \"计算中\", color: \"processing\" },\r\n+    \"preparing-upload\": { text: \"准备上传\", color: \"processing\" },\r\n+    paused: { text: \"已暂停\", color: \"orange\" },\r\n+    done: { text: \"已完成\", color: \"green\" },\r\n+    instant: { text: \"秒传\", color: \"cyan\" },\r\n+    error: { text: \"错误\", color: \"red\" },\r\n+    \"merge-error\": { text: \"合并错误\", color: \"red\" },\r\n+  };\r\n+\r\n+  // Table columns 配置\r\n+  const columns = [\r\n+    { title: \"文件名\", dataIndex: \"fileName\", key: \"fileName\" },\r\n+    {\r\n+      title: \"大小\",\r\n+      dataIndex: \"fileSize\",\r\n+      key: \"fileSize\",\r\n+      render: (size: number) => `${size} 字节`,\r\n+    },\r\n+    { title: \"分片数\", dataIndex: \"chunkCount\", key: \"chunkCount\" },\r\n+    {\r\n+      title: \"状态\",\r\n+      dataIndex: \"status\",\r\n+      key: \"status\",\r\n+      render: (status: string) => {\r\n+        const s = statusMap[status] || { text: status, color: \"default\" };\r\n+        return <Tag color={s.color}>{s.text}</Tag>;\r\n+      },\r\n+    },\r\n+    {\r\n+      title: \"进度\",\r\n+      dataIndex: \"progress\",\r\n+      key: \"progress\",\r\n+      render: (progress: number) => (\r\n+        <Progress percent={progress} size=\"small\" />\r\n+      ),\r\n+    },\r\n+  ];\r\n+\r\n   return (\r\n     <div>\r\n-      <FileSelector />\r\n-      <UploadButton onUpload={uploadAll} />\r\n-      <FileTable\r\n-        files={allFiles}\r\n-        progressMap={progressMap}\r\n-        batchInfo={batchInfo}\r\n-      />\r\n+      <input type=\"file\" ref={inputRef} onChange={handleFileChange} multiple />\r\n+      <button onClick={uploadAll} style={{ marginLeft: 8 }}>\r\n+        上传文件\r\n+      </button>\r\n+      {loading && <div style={{ color: \"blue\" }}>处理中...</div>}\r\n+      {cost !== null && !loading && (\r\n+        <div style={{ color: \"green\" }}>操作耗时：{cost} ms</div>\r\n+      )}\r\n+\r\n+      {batchInfo && (\r\n+        <div style={{ marginTop: 8, color: \"purple\" }}>\r\n+          批量上传进度：{batchInfo.current}/{batchInfo.total}\r\n+        </div>\r\n+      )}\r\n+      {allFiles.length > 0 && (\r\n+        <div style={{ marginTop: 8 }}>\r\n+          <Table\r\n+            columns={columns}\r\n+            dataSource={allFiles.map((f) => ({\r\n+              ...f,\r\n+              key: f.id,\r\n+              progress: progressMap[f.id] ?? 0,\r\n+            }))}\r\n+            pagination={false}\r\n+            bordered\r\n+          />\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default FileUpload;\r\n"
                },
                {
                    "date": 1748874609896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,13 @@\n     setProgressMap,\r\n     refreshFiles,\r\n   });\r\n \r\n+  const filePrepareWorkerUrl = new URL(\r\n+    \"./worker/filePrepareWorker.ts\",\r\n+    import.meta.url\r\n+  ).href;\r\n+\r\n   useEffect(() => {\r\n     refreshFiles();\r\n   }, [refreshFiles]);\r\n \r\n@@ -122,4 +127,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n+export default FileUpload;\r\n"
                },
                {
                    "date": 1748874765322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n import { Progress, Table, Tag } from \"antd\";\r\n import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n+import { ByteConvert } from './utils'\r\n import localforage from \"localforage\";\r\n import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n \r\n"
                },
                {
                    "date": 1748874780478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n     {\r\n       title: \"大小\",\r\n       dataIndex: \"fileSize\",\r\n       key: \"fileSize\",\r\n-      render: (size: number) => `${size} 字节`,\r\n+      render: (size: number) => `${ByteConvert(size)}`,\r\n     },\r\n     { title: \"分片数\", dataIndex: \"chunkCount\", key: \"chunkCount\" },\r\n     {\r\n       title: \"状态\",\r\n"
                },
                {
                    "date": 1748874794744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n       title: \"大小\",\r\n       dataIndex: \"fileSize\",\r\n       key: \"fileSize\",\r\n       render: (size: number) => `${ByteConvert(size)}`,\r\n+      align: \"right\",\r\n     },\r\n     { title: \"分片数\", dataIndex: \"chunkCount\", key: \"chunkCount\" },\r\n     {\r\n       title: \"状态\",\r\n"
                },
                {
                    "date": 1748874803906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,9 @@\n       dataIndex: \"fileSize\",\r\n       key: \"fileSize\",\r\n       render: (size: number) => `${ByteConvert(size)}`,\r\n       align: \"right\",\r\n+      width: \"15%\",\r\n     },\r\n     { title: \"分片数\", dataIndex: \"chunkCount\", key: \"chunkCount\" },\r\n     {\r\n       title: \"状态\",\r\n"
                },
                {
                    "date": 1748874815736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,15 @@\n       render: (size: number) => `${ByteConvert(size)}`,\r\n       align: \"right\",\r\n       width: \"15%\",\r\n     },\r\n-    { title: \"分片数\", dataIndex: \"chunkCount\", key: \"chunkCount\" },\r\n     {\r\n+      title: \"分片数\",\r\n+      dataIndex: \"chunkCount\",\r\n+      key: \"chunkCount\",\r\n+      width: \"10%\",\r\n+    },\r\n+    {\r\n       title: \"状态\",\r\n       dataIndex: \"status\",\r\n       key: \"status\",\r\n       render: (status: string) => {\r\n"
                },
                {
                    "date": 1748874841154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,10 @@\n       render: (status: string) => {\r\n         const s = statusMap[status] || { text: status, color: \"default\" };\r\n         return <Tag color={s.color}>{s.text}</Tag>;\r\n       },\r\n+      align: \"center\",\r\n+      width: \"15%\",\r\n     },\r\n     {\r\n       title: \"进度\",\r\n       dataIndex: \"progress\",\r\n"
                },
                {
                    "date": 1748874853626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import { Progress, Table, Tag } from \"antd\";\r\n import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n-import { ByteConvert } from './utils'\r\n+import { ByteConvert } from \"./utils\";\r\n import localforage from \"localforage\";\r\n import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n \r\n@@ -80,8 +80,9 @@\n     {\r\n       title: \"分片数\",\r\n       dataIndex: \"chunkCount\",\r\n       key: \"chunkCount\",\r\n+      align: \"right\",\r\n       width: \"10%\",\r\n     },\r\n     {\r\n       title: \"状态\",\r\n@@ -100,8 +101,10 @@\n       key: \"progress\",\r\n       render: (progress: number) => (\r\n         <Progress percent={progress} size=\"small\" />\r\n       ),\r\n+      align: \"center\",\r\n+      width: \"15%\",\r\n     },\r\n   ];\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1748874886929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,26 @@\n       ),\r\n       align: \"center\",\r\n       width: \"15%\",\r\n     },\r\n+    {\r\n+      title: \"操作\",\r\n+      dataIndex: \"action\",\r\n+      key: \"action\",\r\n+      render: (text: string, record: any) => {\r\n+        const { status } = record;\r\n+        if (status === \"uploading\") {\r\n+          return (\r\n+            <Popconfirm\r\n+              title=\"确定取消上传？\"\r\n+              onConfirm={() => handleCancel(record)}\r\n+            >\r\n+              <a>取消上传</a>\r\n+            </Popconfirm>\r\n+          );\r\n+        }\r\n+      },\r\n+    },\r\n   ];\r\n \r\n   return (\r\n     <div>\r\n"
                },
                {
                    "date": 1748874896765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,18 +110,8 @@\n       dataIndex: \"action\",\r\n       key: \"action\",\r\n       render: (text: string, record: any) => {\r\n         const { status } = record;\r\n-        if (status === \"uploading\") {\r\n-          return (\r\n-            <Popconfirm\r\n-              title=\"确定取消上传？\"\r\n-              onConfirm={() => handleCancel(record)}\r\n-            >\r\n-              <a>取消上传</a>\r\n-            </Popconfirm>\r\n-          );\r\n-        }\r\n       },\r\n     },\r\n   ];\r\n \r\n"
                },
                {
                    "date": 1748874904265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,9 @@\n       dataIndex: \"action\",\r\n       key: \"action\",\r\n       render: (text: string, record: any) => {\r\n         const { status } = record;\r\n+        console.log(status);\r\n       },\r\n     },\r\n   ];\r\n \r\n"
                },
                {
                    "date": 1748874973639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+import \"antd/dist/reset.css\";\r\n+\r\n+import { Progress, Table, Tag } from \"antd\";\r\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+\r\n+import { ByteConvert } from \"./utils\";\r\n+import localforage from \"localforage\";\r\n+import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n+import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n+\r\n+localforage.config({\r\n+  name: \"upload-indexeddb\",\r\n+  storeName: \"upload_files\",\r\n+});\r\n+\r\n+const FileUpload = () => {\r\n+  const inputRef = useRef<HTMLInputElement>(null);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [cost, setCost] = useState<number | null>(null);\r\n+  const [progressMap, setProgressMap] = useState<Record<string, number>>({});\r\n+  const { files: allFiles, refresh: refreshFiles } = useIndexedDBFiles();\r\n+  const { uploadAll, batchInfo } = useBatchUploader({\r\n+    setProgressMap,\r\n+    refreshFiles,\r\n+  });\r\n+\r\n+  const filePrepareWorkerUrl = new URL(\r\n+    \"./worker/filePrepareWorker.ts\",\r\n+    import.meta.url\r\n+  ).href;\r\n+\r\n+  useEffect(() => {\r\n+    refreshFiles();\r\n+  }, [refreshFiles]);\r\n+\r\n+  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const files = e.target.files;\r\n+    if (!files || files.length === 0) return;\r\n+    setLoading(true);\r\n+    setCost(null);\r\n+    const start = Date.now();\r\n+    const worker = new Worker(filePrepareWorkerUrl);\r\n+    worker.postMessage({ files });\r\n+    worker.onmessage = async (event) => {\r\n+      const { uploadFiles } = event.data;\r\n+      for (const uploadFile of uploadFiles) {\r\n+        await localforage.setItem(uploadFile.id, uploadFile);\r\n+      }\r\n+      await refreshFiles();\r\n+      const end = Date.now();\r\n+      setCost(end - start);\r\n+      setLoading(false);\r\n+      setTimeout(() => setCost(null), 3000);\r\n+    };\r\n+  };\r\n+\r\n+  const statusMap: Record<string, { text: string; color: string }> = {\r\n+    queued: { text: \"排队中\", color: \"default\" },\r\n+    \"queued-for-upload\": { text: \"等待上传\", color: \"default\" },\r\n+    calculating: { text: \"计算中\", color: \"processing\" },\r\n+    \"preparing-upload\": { text: \"准备上传\", color: \"processing\" },\r\n+    paused: { text: \"已暂停\", color: \"orange\" },\r\n+    done: { text: \"已完成\", color: \"green\" },\r\n+    instant: { text: \"秒传\", color: \"cyan\" },\r\n+    error: { text: \"错误\", color: \"red\" },\r\n+    \"merge-error\": { text: \"合并错误\", color: \"red\" },\r\n+  };\r\n+\r\n+  // Table columns 配置\r\n+  const columns = [\r\n+    { title: \"文件名\", dataIndex: \"fileName\", key: \"fileName\" },\r\n+    {\r\n+      title: \"大小\",\r\n+      dataIndex: \"fileSize\",\r\n+      key: \"fileSize\",\r\n+      render: (size: number) => `${ByteConvert(size)}`,\r\n+      align: \"right\",\r\n+      width: \"15%\",\r\n+    },\r\n+    {\r\n+      title: \"分片数\",\r\n+      dataIndex: \"chunkCount\",\r\n+      key: \"chunkCount\",\r\n+      align: \"right\",\r\n+      width: \"10%\",\r\n+    },\r\n+    {\r\n+      title: \"状态\",\r\n+      dataIndex: \"status\",\r\n+      key: \"status\",\r\n+      render: (status: string) => {\r\n+        const s = statusMap[status] || { text: status, color: \"default\" };\r\n+        return <Tag color={s.color}>{s.text}</Tag>;\r\n+      },\r\n+      align: \"center\",\r\n+      width: \"15%\",\r\n+    },\r\n+    {\r\n+      title: \"进度\",\r\n+      dataIndex: \"progress\",\r\n+      key: \"progress\",\r\n+      render: (progress: number) => (\r\n+        <Progress percent={progress} size=\"small\" />\r\n+      ),\r\n+      align: \"center\",\r\n+      width: \"15%\",\r\n+    },\r\n+    {\r\n+      title: \"操作\",\r\n+      dataIndex: \"action\",\r\n+      key: \"action\",\r\n+      render: (text: string, record: any) => {\r\n+        const { status } = record;\r\n+        console.log(status);\r\n+      },\r\n+    },\r\n+  ];\r\n+\r\n+  return (\r\n+    <div>\r\n+      <input type=\"file\" ref={inputRef} onChange={handleFileChange} multiple />\r\n+      <button onClick={uploadAll} style={{ marginLeft: 8 }}>\r\n+        上传文件\r\n+      </button>\r\n+      {loading && <div style={{ color: \"blue\" }}>处理中...</div>}\r\n+      {cost !== null && !loading && (\r\n+        <div style={{ color: \"green\" }}>操作耗时：{cost} ms</div>\r\n+      )}\r\n+\r\n+      {batchInfo && (\r\n+        <div style={{ marginTop: 8, color: \"purple\" }}>\r\n+          批量上传进度：{batchInfo.current}/{batchInfo.total}\r\n+        </div>\r\n+      )}\r\n+      {allFiles.length > 0 && (\r\n+        <div style={{ marginTop: 8 }}>\r\n+          <Table\r\n+            columns={columns}\r\n+            dataSource={allFiles.map((f) => ({\r\n+              ...f,\r\n+              key: f.id,\r\n+              progress: progressMap[f.id] ?? 0,\r\n+            }))}\r\n+            pagination={false}\r\n+            bordered\r\n+          />\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default FileUpload;\r\n"
                },
                {
                    "date": 1748875125572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,24 +65,26 @@\n     error: { text: \"错误\", color: \"red\" },\r\n     \"merge-error\": { text: \"合并错误\", color: \"red\" },\r\n   };\r\n \r\n+  type AlignItem = \"left\" | \"center\" | \"right\";\r\n+\r\n   // Table columns 配置\r\n   const columns = [\r\n     { title: \"文件名\", dataIndex: \"fileName\", key: \"fileName\" },\r\n     {\r\n       title: \"大小\",\r\n       dataIndex: \"fileSize\",\r\n       key: \"fileSize\",\r\n       render: (size: number) => `${ByteConvert(size)}`,\r\n-      align: \"right\",\r\n+      align: \"right\" as AlignItem,\r\n       width: \"15%\",\r\n     },\r\n     {\r\n       title: \"分片数\",\r\n       dataIndex: \"chunkCount\",\r\n       key: \"chunkCount\",\r\n-      align: \"right\",\r\n+      align: \"right\" as AlignItem,\r\n       width: \"10%\",\r\n     },\r\n     {\r\n       title: \"状态\",\r\n@@ -91,9 +93,9 @@\n       render: (status: string) => {\r\n         const s = statusMap[status] || { text: status, color: \"default\" };\r\n         return <Tag color={s.color}>{s.text}</Tag>;\r\n       },\r\n-      align: \"center\",\r\n+      align: \"center\" as AlignItem,\r\n       width: \"15%\",\r\n     },\r\n     {\r\n       title: \"进度\",\r\n@@ -101,9 +103,9 @@\n       key: \"progress\",\r\n       render: (progress: number) => (\r\n         <Progress percent={progress} size=\"small\" />\r\n       ),\r\n-      align: \"center\",\r\n+      align: \"center\" as AlignItem,\r\n       width: \"15%\",\r\n     },\r\n     {\r\n       title: \"操作\",\r\n"
                },
                {
                    "date": 1748875354044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { Progress, Table, Tag } from \"antd\";\r\n import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n import { ByteConvert } from \"./utils\";\r\n+import FileSelector from \"./components/FileSelector\";\r\n import localforage from \"localforage\";\r\n import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n \r\n@@ -22,8 +23,10 @@\n   const { uploadAll, batchInfo } = useBatchUploader({\r\n     setProgressMap,\r\n     refreshFiles,\r\n   });\r\n+  const [totalFiles, setTotalFiles] = useState(0);\r\n+  const [completedFiles, setCompletedFiles] = useState(0);\r\n \r\n   const filePrepareWorkerUrl = new URL(\r\n     \"./worker/filePrepareWorker.ts\",\r\n     import.meta.url\r\n@@ -53,8 +56,18 @@\n       setTimeout(() => setCost(null), 3000);\r\n     };\r\n   };\r\n \r\n+  const handleFilesSelected = (files: FileList) => {\r\n+    const fileListArray = Array.from(files);\r\n+    setTotalFiles(fileListArray.length);\r\n+    setCompletedFiles(0); // Reset completed files count when new files are selected\r\n+    // TODO: Implement actual file processing and update completedFiles\r\n+    console.log(\"Files selected:\", fileListArray);\r\n+    // Placeholder for triggering file processing logic\r\n+    // processFiles(fileListArray);\r\n+  };\r\n+\r\n   const statusMap: Record<string, { text: string; color: string }> = {\r\n     queued: { text: \"排队中\", color: \"default\" },\r\n     \"queued-for-upload\": { text: \"等待上传\", color: \"default\" },\r\n     calculating: { text: \"计算中\", color: \"processing\" },\r\n@@ -147,8 +160,9 @@\n             bordered\r\n           />\r\n         </div>\r\n       )}\r\n+      <FileSelector onFilesSelected={handleFilesSelected} totalFilesCount={totalFiles} completedFilesCount={completedFiles} />\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748875387526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import { Progress, Table, Tag } from \"antd\";\r\n import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n import { ByteConvert } from \"./utils\";\r\n-import FileSelector from \"./components/FileSelector\";\r\n import localforage from \"localforage\";\r\n import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n \r\n@@ -23,10 +22,8 @@\n   const { uploadAll, batchInfo } = useBatchUploader({\r\n     setProgressMap,\r\n     refreshFiles,\r\n   });\r\n-  const [totalFiles, setTotalFiles] = useState(0);\r\n-  const [completedFiles, setCompletedFiles] = useState(0);\r\n \r\n   const filePrepareWorkerUrl = new URL(\r\n     \"./worker/filePrepareWorker.ts\",\r\n     import.meta.url\r\n@@ -56,18 +53,8 @@\n       setTimeout(() => setCost(null), 3000);\r\n     };\r\n   };\r\n \r\n-  const handleFilesSelected = (files: FileList) => {\r\n-    const fileListArray = Array.from(files);\r\n-    setTotalFiles(fileListArray.length);\r\n-    setCompletedFiles(0); // Reset completed files count when new files are selected\r\n-    // TODO: Implement actual file processing and update completedFiles\r\n-    console.log(\"Files selected:\", fileListArray);\r\n-    // Placeholder for triggering file processing logic\r\n-    // processFiles(fileListArray);\r\n-  };\r\n-\r\n   const statusMap: Record<string, { text: string; color: string }> = {\r\n     queued: { text: \"排队中\", color: \"default\" },\r\n     \"queued-for-upload\": { text: \"等待上传\", color: \"default\" },\r\n     calculating: { text: \"计算中\", color: \"processing\" },\r\n@@ -160,13 +147,8 @@\n             bordered\r\n           />\r\n         </div>\r\n       )}\r\n-      <FileSelector\r\n-        onFilesSelected={handleFilesSelected}\r\n-        totalFilesCount={totalFiles}\r\n-        completedFilesCount={completedFiles}\r\n-      />\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748875526445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { Progress, Table, Tag } from \"antd\";\r\n import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n import { ByteConvert } from \"./utils\";\r\n+import type {ProcessingStats} from './types/upload'\r\n import localforage from \"localforage\";\r\n import { useBatchUploader } from \"./hooks/useBatchUploader\";\r\n import { useIndexedDBFiles } from \"./hooks/useIndexedDBFiles\";\r\n \r\n"
                }
            ],
            "date": 1748871871865,
            "name": "Commit-0",
            "content": "import \"antd/dist/reset.css\";\r\n\r\nimport { Progress, Table, Tag } from \"antd\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport localforage from \"localforage\";\r\nimport { useBatchUploader } from \"./components/FileUpload/hooks/useBatchUploader\";\r\nimport { useIndexedDBFiles } from \"./components/FileUpload/hooks/useIndexedDBFiles\";\r\n\r\nlocalforage.config({\r\n  name: \"upload-indexeddb\",\r\n  storeName: \"upload_files\",\r\n});\r\n\r\nconst App = () => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [cost, setCost] = useState<number | null>(null);\r\n  const [progressMap, setProgressMap] = useState<Record<string, number>>({});\r\n  const { files: allFiles, refresh: refreshFiles } = useIndexedDBFiles();\r\n  const { uploadAll, batchInfo } = useBatchUploader({\r\n    setProgressMap,\r\n    refreshFiles,\r\n  });\r\n\r\n  const filePrepareWorkerUrl = new URL(\r\n    \"./worker/filePrepareWorker.ts\",\r\n    import.meta.url\r\n  ).href;\r\n\r\n  useEffect(() => {\r\n    refreshFiles();\r\n  }, [refreshFiles]);\r\n\r\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files;\r\n    if (!files || files.length === 0) return;\r\n    setLoading(true);\r\n    setCost(null);\r\n    const start = Date.now();\r\n    const worker = new Worker(filePrepareWorkerUrl);\r\n    worker.postMessage({ files });\r\n    worker.onmessage = async (event) => {\r\n      const { uploadFiles } = event.data;\r\n      for (const uploadFile of uploadFiles) {\r\n        await localforage.setItem(uploadFile.id, uploadFile);\r\n      }\r\n      await refreshFiles();\r\n      const end = Date.now();\r\n      setCost(end - start);\r\n      setLoading(false);\r\n      setTimeout(() => setCost(null), 3000);\r\n    };\r\n  };\r\n\r\n  const statusMap: Record<string, { text: string; color: string }> = {\r\n    queued: { text: \"排队中\", color: \"default\" },\r\n    \"queued-for-upload\": { text: \"等待上传\", color: \"default\" },\r\n    calculating: { text: \"计算中\", color: \"processing\" },\r\n    \"preparing-upload\": { text: \"准备上传\", color: \"processing\" },\r\n    paused: { text: \"已暂停\", color: \"orange\" },\r\n    done: { text: \"已完成\", color: \"green\" },\r\n    instant: { text: \"秒传\", color: \"cyan\" },\r\n    error: { text: \"错误\", color: \"red\" },\r\n    \"merge-error\": { text: \"合并错误\", color: \"red\" },\r\n  };\r\n\r\n  // Table columns 配置\r\n  const columns = [\r\n    { title: \"文件名\", dataIndex: \"fileName\", key: \"fileName\" },\r\n    {\r\n      title: \"大小\",\r\n      dataIndex: \"fileSize\",\r\n      key: \"fileSize\",\r\n      render: (size: number) => `${size} 字节`,\r\n    },\r\n    { title: \"分片数\", dataIndex: \"chunkCount\", key: \"chunkCount\" },\r\n    {\r\n      title: \"状态\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      render: (status: string) => {\r\n        const s = statusMap[status] || { text: status, color: \"default\" };\r\n        return <Tag color={s.color}>{s.text}</Tag>;\r\n      },\r\n    },\r\n    {\r\n      title: \"进度\",\r\n      dataIndex: \"progress\",\r\n      key: \"progress\",\r\n      render: (progress: number) => (\r\n        <Progress percent={progress} size=\"small\" />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" ref={inputRef} onChange={handleFileChange} multiple />\r\n      <button onClick={uploadAll} style={{ marginLeft: 8 }}>\r\n        上传文件\r\n      </button>\r\n      {loading && <div style={{ color: \"blue\" }}>处理中...</div>}\r\n      {cost !== null && !loading && (\r\n        <div style={{ color: \"green\" }}>操作耗时：{cost} ms</div>\r\n      )}\r\n\r\n      {batchInfo && (\r\n        <div style={{ marginTop: 8, color: \"purple\" }}>\r\n          批量上传进度：{batchInfo.current}/{batchInfo.total}\r\n        </div>\r\n      )}\r\n      {allFiles.length > 0 && (\r\n        <div style={{ marginTop: 8 }}>\r\n          <Table\r\n            columns={columns}\r\n            dataSource={allFiles.map((f) => ({\r\n              ...f,\r\n              key: f.id,\r\n              progress: progressMap[f.id] ?? 0,\r\n            }))}\r\n            pagination={false}\r\n            bordered\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"
        }
    ]
}